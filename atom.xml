<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sander Lee</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lisongda.com/"/>
  <updated>2018-11-21T07:28:23.135Z</updated>
  <id>http://lisongda.com/</id>
  
  <author>
    <name>Sander Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android输入法从零到一系列（之一）</title>
    <link href="http://lisongda.com/2018/10/30/Android%E8%BE%93%E5%85%A5%E6%B3%95%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E7%B3%BB%E5%88%97%EF%BC%88%E4%B9%8B%E4%B8%80%EF%BC%89/"/>
    <id>http://lisongda.com/2018/10/30/Android输入法从零到一系列（之一）/</id>
    <published>2018-10-30T07:14:41.000Z</published>
    <updated>2018-11-21T07:28:23.135Z</updated>
    
    <content type="html"><![CDATA[<p>本系列将会完整实现一个输入法。</p><h2 id="创建项目并添加icon"><a href="#创建项目并添加icon" class="headerlink" title="创建项目并添加icon"></a>创建项目并添加icon</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 27</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.lee.lim&quot;</span><br><span class="line">        minSdkVersion 19</span><br><span class="line">        targetSdkVersion 27</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app下build.gradle文件部分内容如上，包名<code>com.lee.lim</code>,<code>targetSdkVersion</code>为27。</p><h3 id="添加icon"><a href="#添加icon" class="headerlink" title="添加icon"></a>添加icon</h3><p><code>File-&gt;New-&gt;Image Asset</code>打开<code>Asset Studio</code>:</p><p><img src="/images/asset_studio1.png" alt=""></p><p>在这里设置前景图层和背景图层。具体如何设置，参见<a href="https://developer.android.com/studio/write/image-asset-studio" target="_blank" rel="noopener">这里</a>。<br>效果图如下：</p><p><img src="/images/assetStudio2.png" alt=""></p><p>点击<code>next</code>，然后点击 <code>Finish</code>。最后看下运行后的icon效果：</p><p><img src="/images/icon.png" alt=""></p><p>可以看到针对Android 8.1系统已经做出了icon适配。</p><p>以上代码<a href="https://github.com/Brooks0129/LowInputMethod/releases/tag/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E6%B7%BB%E5%8A%A0icon" target="_blank" rel="noopener">地址</a>。</p><h2 id="创建一个简单的输入法"><a href="#创建一个简单的输入法" class="headerlink" title="创建一个简单的输入法"></a>创建一个简单的输入法</h2><h2 id="引导用户打开输入法"><a href="#引导用户打开输入法" class="headerlink" title="引导用户打开输入法"></a>引导用户打开输入法</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本系列将会完整实现一个输入法。&lt;/p&gt;
&lt;h2 id=&quot;创建项目并添加icon&quot;&gt;&lt;a href=&quot;#创建项目并添加icon&quot; class=&quot;headerlink&quot; title=&quot;创建项目并添加icon&quot;&gt;&lt;/a&gt;创建项目并添加icon&lt;/h2&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
      <category term="输入法" scheme="http://lisongda.com/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android使用EmojiCompat兼容Emoji表情</title>
    <link href="http://lisongda.com/2018/06/07/Android%E4%BD%BF%E7%94%A8EmojiCompat%E5%85%BC%E5%AE%B9Emoji%E8%A1%A8%E6%83%85/"/>
    <id>http://lisongda.com/2018/06/07/Android使用EmojiCompat兼容Emoji表情/</id>
    <published>2018-06-07T12:31:27.000Z</published>
    <updated>2018-06-08T04:27:41.970Z</updated>
    
    <content type="html"><![CDATA[<p>移动设备之间文字聊天可以自由使用Emoji表情，但是在一些低版本的Android设备上，如果接收到无法识别的emoji字符，就会显示乱码<code>☐</code>。我们的项目中就存在这样的问题，部分手机无法识别对方发来的Emoji表情。如下图所示：</p><p><img src="/images/25.png" alt=""></p><p>上图是Emoji表情的发送方（小米手机），一共涉及到四个Emoji表情。</p><p>再看下Emoji表情的接收方（Motorola）：</p><p><img src="/images/26.png" alt=""></p><p>正如我们看到的，除了😊，其他Emoji表情全部显示不出来。</p><p>而我们想要的效果如下：</p><p><img src="/images/27.png" alt=""></p><p><code>EmojiCompat</code>兼容库提供了向下兼容的Emoji表情，使其可以在Android 4.4（API 19）及以上版本正常显示。</p><p>下面介绍如何使用<code>EmojiCompat</code>完成上述效果。</p><p>每个Emoji表情对应一个unicode字符，<code>EmojiCompat</code>在系统字体无法解析unicode字符时，会使用<code>EmojiSpans</code>标识它，并且转化为emoji图案。</p><p>具体过程如下图（图片出自Android官网）：</p><p><img src="/images/28.png" alt=""></p><p>可以使用两种方式来配置<code>EmojiCompat</code>：</p><ul><li>Downloadable fonts configuration</li><li>Bundled fonts configuration</li></ul><h3 id="Downloadable-fonts-configuration"><a href="#Downloadable-fonts-configuration" class="headerlink" title="Downloadable fonts configuration"></a>Downloadable fonts configuration</h3><p>使用<code>the Downloadable Fonts support library</code>来下载Emoji字体。它也会把最新的Emoji的表情下载下来。</p><p>首先需要在<code>build.gradle</code>添加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile &quot;com.android.support:support-emoji:27.1.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来执行<code>EmojiCompat</code>初始化的操作，一共分三步：</p><p>1.创建<code>FontRequest</code>实例.<a href="https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts#top_of_page" target="_blank" rel="noopener">详见</a></p><p>2.通过Context和<code>FontRequest</code>实例创建<code>FontRequestEmojiCompatConfig</code>实例</p><p>3.调用<code>EmojiCompat</code>的<code>init</code>方法完成初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FontRequest fontRequest = <span class="keyword">new</span> FontRequest(</span><br><span class="line">              <span class="string">"com.example.fontprovider"</span>,</span><br><span class="line">              <span class="string">"com.example"</span>,</span><br><span class="line">              <span class="string">"emoji compat Font Query"</span>, CERTIFICATES);</span><br><span class="line">       EmojiCompat.Config config = <span class="keyword">new</span> FontRequestEmojiCompatConfig(<span class="keyword">this</span>, fontRequest);</span><br><span class="line">       EmojiCompat.init(config);</span><br></pre></td></tr></table></figure><p>在<code>EmojiCompat</code>初始化后，将xml文件中的控件替换为<code>EmojiCompat</code>相关控件。如<code>TextView</code>-&gt;<code>EmojiTextView</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.text.emoji.widget.EmojiTextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.text.emoji.widget.EmojiEditText</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.text.emoji.widget.EmojiButton</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Library-components"><a href="#Library-components" class="headerlink" title="Library components"></a>Library components</h3><p>EmojiCompat库包含以下组件：</p><p><img src="/images/29.png" alt=""></p><p><code>Widgets</code>：<code>EmojiEditText</code>, <code>EmojiTextView</code>, <code>EmojiButton</code></p><p><code>EmojiCompat</code>：核心部分，提供对外所有回调，是连接各部分的桥梁</p><p><code>EmojiCompat.Config</code>：初始化单例</p><p><code>EmojiSpan</code>：<code>ReplacementSpan</code>的子类，用于渲染emoji表情</p><p><code>EmojiCompat Font</code>：使用字体来显示emoji</p><h3 id="初始化配置时的可选项"><a href="#初始化配置时的可选项" class="headerlink" title="初始化配置时的可选项"></a>初始化配置时的可选项</h3><p><code>setReplaceAll()</code>：参数可设true或者false，决定是否要把所有<code>EmojiSpans</code>可以找到的emoji表情都替换，默认值为false，表示如果系统可以识别该emoji表情，则不替换。</p><p><code>setEmojiSpanIndicatorEnabled()</code>：参数可设true或者false，如果为true，表示把<code>EmojiSpan</code>识别的emoji表情使用特定的背景色标标识出来。主要用于调试。</p><p><code>setEmojiSpanIndicatorColor()</code>：特定标识的颜色，默认为绿色。</p><p><code>registerInitCallback</code>：注册<code>EmojiCompat</code>初始化的回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EmojiCompat.Config config = <span class="keyword">new</span> FontRequestEmojiCompatConfig(...)</span><br><span class="line">       .setReplaceAll(<span class="keyword">true</span>)</span><br><span class="line">       .setEmojiSpanIndicatorEnabled(<span class="keyword">true</span>)</span><br><span class="line">       .setEmojiSpanIndicatorColor(Color.GREEN)</span><br><span class="line">       .registerInitCallback(<span class="keyword">new</span> InitCallback() &#123;...&#125;)</span><br></pre></td></tr></table></figure><h3 id="Bundled-fonts-configuration"><a href="#Bundled-fonts-configuration" class="headerlink" title="Bundled fonts configuration"></a>Bundled fonts configuration</h3><p>使用<code>Bundled fonts configuration</code>可以直接本地加载emoji字体，无需下载。但是缺点也很明显，会增加我们的apk大小。使用这种方式会把emoji字体直接放入assets目录下。如图：</p><p><img src="/images/30.png" alt=""></p><p>NotoColorEmojiCompat字体让我们的apk体积增加了6M多。。。</p><p>anyway，先看看这种方法怎么用吧。</p><p>首先仍然是添加依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile &quot;com.android.support:support-emoji-bundled:$version&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是<code>EmojiCompat</code>的初始化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EmojiCompat.Config config = <span class="keyword">new</span> BundledEmojiCompatConfig(<span class="keyword">this</span>);</span><br><span class="line">EmojiCompat.init(config);</span><br></pre></td></tr></table></figure><p>在<code>EmojiCompat</code>初始化后，将xml文件中的控件替换为<code>EmojiCompat</code>相关控件。如<code>TextView</code>-&gt;<code>EmojiTextView</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.text.emoji.widget.EmojiTextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.text.emoji.widget.EmojiEditText</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.text.emoji.widget.EmojiButton</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Using-EmojiCompat-without-widgets"><a href="#Using-EmojiCompat-without-widgets" class="headerlink" title="Using EmojiCompat without widgets"></a>Using EmojiCompat without widgets</h3><p><code>EmojiCompat</code>使用<code>EmojiSpan</code>生成emoji表情。<code>EmojiCompat</code>提供了一个方法用于将emoji字符转化为<code>Spanned</code>实例，使用这个方法，我们可以处理或者缓存这个<code>Spanned</code>实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CharSequence processed = EmojiCompat.get().process(<span class="string">"neutral face \uD83D\uDE10"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;移动设备之间文字聊天可以自由使用Emoji表情，但是在一些低版本的Android设备上，如果接收到无法识别的emoji字符，就会显示乱码&lt;code&gt;☐&lt;/code&gt;。我们的项目中就存在这样的问题，部分手机无法识别对方发来的Emoji表情。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="-Android" scheme="http://lisongda.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发常见安全漏洞总结</title>
    <link href="http://lisongda.com/2018/05/25/Android%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <id>http://lisongda.com/2018/05/25/Android开发常见安全漏洞总结/</id>
    <published>2018-05-25T13:41:03.000Z</published>
    <updated>2018-05-28T12:19:36.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebView组件远程代码执行漏洞"><a href="#WebView组件远程代码执行漏洞" class="headerlink" title="WebView组件远程代码执行漏洞"></a>WebView组件远程代码执行漏洞</h2><h3 id="addJavascriptInterface接口"><a href="#addJavascriptInterface接口" class="headerlink" title="addJavascriptInterface接口"></a>addJavascriptInterface接口</h3><p>Android API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法，简单的说就是通过addJavascriptInterface给WebView加入一个JavaScript桥接接口，JavaScript通过调用这个接口可以直接操作本地的JAVA接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);  </span><br><span class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> JSInterface(), <span class="string">"jsInterface"</span>);</span><br></pre></td></tr></table></figure><p>我们向WebView注册一个名叫“jsInterface”的对象，然后在JS中可以访问到jsInterface这个对象，就可以调用这个对象的一些方法，最终可以调用到Java代码中，从而实现了JS与Java代码的交互。</p><p>JS中可以遍历window对象，找到存在“getClass”方法的对象的对象，然后再通过反射的机制，得到Runtime对象，然后调用静态方法来执行一些命令。</p><p>核心代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">cmdArgs</span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> obj <span class="keyword">in</span> <span class="built_in">window</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"getClass"</span> <span class="keyword">in</span> <span class="built_in">window</span>[obj]) &#123;  </span><br><span class="line">            alert(obj);  </span><br><span class="line">            <span class="keyword">return</span>  <span class="built_in">window</span>[obj].getClass().forName(<span class="string">"java.lang.Runtime"</span>)  </span><br><span class="line">                 .getMethod(<span class="string">"getRuntime"</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(cmdArgs);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>Google 在Android 4.2 版本中规定对被调用的函数以 @JavascriptInterface进行注解从而避免漏洞攻击</li><li>Android 4.2版本之前采用拦截<code>prompt()</code>进行漏洞修复。 <a href="https://blog.csdn.net/leehong2005/article/details/11808557/" target="_blank" rel="noopener">详见</a></li></ol><h3 id="searchBoxJavaBridge-接口"><a href="#searchBoxJavaBridge-接口" class="headerlink" title="searchBoxJavaBridge_接口"></a>searchBoxJavaBridge_接口</h3><p>在Android 3.0以下，Android系统会默认通过searchBoxJavaBridge_的Js接口给 WebView 添加一个JS映射对象：searchBoxJavaBridge_对象。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>删除默认添加的”searchBoxJavaBridge_”。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWebView.removeJavascriptInterface(<span class="string">"searchBoxJavaBridge_"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="accessibility-和-accessibilityTraversal"><a href="#accessibility-和-accessibilityTraversal" class="headerlink" title="accessibility 和 accessibilityTraversal"></a>accessibility 和 accessibilityTraversal</h3><p>此漏洞原理与searchBoxJavaBridge_接口远程代码执行相似，均为未移除不安全的默认接口，不过此漏洞需要用户启动系统设置中的第三方辅助服务，利用条件较复杂。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>与searchBoxJavaBridge_的解决方案类似：可以调用removeJavascriptInterface(“accessibility”) 和removeJavascriptInterface(“accessibilityTraversal”) 方法移除这两个默认接口。</p><h2 id="WebView跨域访问漏洞"><a href="#WebView跨域访问漏洞" class="headerlink" title="WebView跨域访问漏洞"></a>WebView跨域访问漏洞</h2><p>如果一个Activity可以被其他应用调起，例如声明了<code>android:exported=&quot;true&quot;</code>，相关WebView又开启了file域访问，同时未对file 域的路径进行严格限制所致。攻击者通过URL Scheme 的方式，可远程打开并加载恶意HTML文件，远程获取APP中包括用户登录凭证在内的所有本地敏感数据。</p><p>涉及到三个方法：</p><ul><li><p>setAllowFileAccess</p><p>设置是否允许WebView使用File协议,默认设置为true，即允许在File域下执行任意JavaScript代码。</p></li><li><p>setAllowFileAccessFromFileURLs</p><p>设置是否允许通过 file url 加载的 Js代码读取其他的本地文件。</p></li><li><p>setAllowUniversalAccessFromFileURLs</p><p>设置是否允许通过 file url 加载的 Javascript 可以访问其他的源(包括http、https等源)。</p></li></ul><h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.file域访问为非功能需求时，手动配置setAllowFileAccessFromFileURLs或setAllowUniversalAccessFromFileURLs两个API为false。（Android4.1版本之前这两个API默认是true，需要显式设置为false）</p><p>2.若需要开启file域访问，则设置file路径的白名单，严格控制file域的访问范围，具体如下：</p><p>（1）固定不变的HTML文件可以放在assets或res目录下，<code>file:///android_asset</code>和<code>file:///android_res</code> 在不开启API的情况下也可以访问；</p><p>（2）可能会更新的HTML文件放在<code>/data/data/(app)</code> 目录下，避免被第三方替换或修改；</p><p>（3）对file域请求做白名单限制时，需要对“../../”特殊情况进行处理，避免白名单被绕过。<br>3.避免App内部的WebView被不信任的第三方调用。排查内置WebView的 Activity是否被导出、必须导出的Activity是否会通过参数传递调起内置的WebView等。</p><p>4.建议进一步对APP目录下的敏感数据进行保护。客户端APP应用设备相关信息（如IMEI、IMSI、Android_id等）作为密钥对敏感数据进行加密。使攻击者难以利用相关漏洞获得敏感信息。  </p><h2 id="WebView组件忽略SSL证书验证错误漏洞"><a href="#WebView组件忽略SSL证书验证错误漏洞" class="headerlink" title="WebView组件忽略SSL证书验证错误漏洞"></a>WebView组件忽略SSL证书验证错误漏洞</h2><p>Android WebView组件加载网页发生证书认证错误时，会调用WebViewClient类的onReceivedSslError方法，如果该方法实现调用了handler.proceed()来忽略该证书错误，则会受到中间人攻击的威胁，可能导致隐私泄露。</p><p>实现onReceivedSslError的处理，漏洞代码样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</span><br><span class="line">                handler.proceed(); <span class="comment">// Ignore SSL certificate errors</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>如上代码在onReceivedSslError处理时没有进行cancel，还是使用了proceed()，忽略掉了发生的SSL异常。</p><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.非浏览器类app，有条件的可以申请正式的ca证书，没条件的可以在客户端中添加证书,切勿信任所有证书或者忽略ssl证书认证错误。</p><p>2.浏览器 app，严格按照客户端校验服务器证书流程处理</p><pre><code>1) 客户端需要检查证书是否过期2) 证书签发的 CA 是否可靠3) CA 的公钥能否正确解开服务器证书的 CA 数字签名，对证书的签名值的有效性做验证4) 服务器证书上的域名是否和服务器的实际域名相匹配</code></pre><p>3.重载了 onReceivedSslError 方法处理时使用 cancel 方法来停止加载 ssl 验证错误的页面，如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedSslError</span><span class="params">(WebView view, SslErrorHandler handler, SslError error)</span> </span>&#123;</span><br><span class="line">                handler.cancel(); <span class="comment">// Ignore SSL certificate errors</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="WebView密码明文保存漏洞"><a href="#WebView密码明文保存漏洞" class="headerlink" title="WebView密码明文保存漏洞"></a>WebView密码明文保存漏洞</h2><p>在使用WebView的过程中忽略了<code>WebView setSavePassword</code>，当用户选择保存在WebView中输入的用户名和密码，则会被明文保存到应用数据目录的<code>databases/webview.db</code>中。如果手机被root就可以获取明文保存的密码，造成用户的个人敏感数据泄露。</p><p>如果代码中没有显示调用<code>setSavePassword(false)</code> ，默认为true。</p><h3 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用<code>WebView.getSettings().setSavePassword(false)</code>来禁止保存密码。</p><h2 id="本地端口开放越权风险"><a href="#本地端口开放越权风险" class="headerlink" title="本地端口开放越权风险"></a>本地端口开放越权风险</h2><p>Android应用通常使用<code>PF_UNIX</code>、<code>PF_INET</code>、<code>PF_NETLINK</code>等不同domain的socket来进行本地IPC或者远程网络通信，这些暴露的socket代表了潜在的本地或远程攻击面，历史上也出现过不少利用socket进行拒绝服务、root提权或者远程命令执行的案例。特别是PF_INET类型的网络socket，可以通过网络与Android应用通信，其原本用于linux环境下开放网络服务，由于缺乏对网络调用者身份或者本地调用者id、permission等细粒度的安全检查机制，在实现不当的情况下，可以突破Android的沙箱限制，以被攻击应用的权限执行命令，通常出现比较严重的漏洞。</p><p>如果没有对收到的socket和内容做任何校验检查，会绕过android各种安全机制以被攻击的应用的权限执行。某些情况下会直接导致远程命令任意执行，同理使用UDP通信使用上述逻辑的代码也会存在类似问题。</p><h3 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h3><p>直接传递命令字或者间接处理有敏感信息或操作时，避免使用socket实现，使用能够控制权限校验身份的方式通讯。</p><h2 id="Content-Provider目录遍历漏洞"><a href="#Content-Provider目录遍历漏洞" class="headerlink" title="Content Provider目录遍历漏洞"></a>Content Provider目录遍历漏洞</h2><p>在使用<code>Content Provider</code>时，将组件导出，提供了openfile接口。在使用<code>Content Provider</code>时，将组件导出，并且实现了OpenFile接口。由于对URI路径没有做相应过滤，导致目录遍历，造成信息泄漏以及远程代码执行问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  重写该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ParcelFileDescriptor <span class="title">openFile</span><span class="params">(Uri uri, String mode)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(getContext().getFilesDir(),uri.getPath());</span><br><span class="line">        <span class="keyword">if</span>(file.exists())&#123;</span><br><span class="line">            <span class="keyword">return</span> ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(uri.getPath());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以构造<code>../../../../../system/etc/hosts</code>URI路径，如果该provider导出或者设置了protect及以下权限，将会读出hosts文件的内容。如果读取了APP data目录下的文件将会导致隐私的泄漏。</p><h3 id="解决方案-7"><a href="#解决方案-7" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>Provider不需要导出，请将export属性设置为false；</li><li>若导出仅为内部通信使用，则设置<code>protectionLevel=signature</code>；</li><li>若<code>Openfile</code>接口不需要实现，请移除该接口的实现；</li><li>若确实需要Openfile接口，请对URI中如../，可能引发遍历的路径字符做相应过滤。</li></ul><h2 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h2><p>  对数据库进行增删改查操作时，程序没有对用户的输入进行过滤，未采用参数化查询的方式，可能导致sql注入攻击。这样攻击者可以精心构造selection、projection参数等sql语句组成部分，实现在未授权的情况下从数据库获取更多的信息。</p><h3 id="解决方案-8"><a href="#解决方案-8" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>Provider不需要导出，请将export属性设置为false</li><li>若导出仅为内部通信使用，则设置protectionLevel=signature</li><li>不直接使用传入的查询语句用于projection和selection，使用由query绑定的参数selectionArgs</li><li>完备的SQL注入语句检测逻辑  </li></ul><h2 id="ZIP文件解压目录遍历风险"><a href="#ZIP文件解压目录遍历风险" class="headerlink" title="ZIP文件解压目录遍历风险"></a>ZIP文件解压目录遍历风险</h2><p>由于zip允许其中的文件含有 <code>.</code>, <code>/</code>, <code>¥</code> 等特殊字符，当从不安全的来源如HTTP下载或者SDK卡获得ZIP格式文件并解压缩时，如果该ZIP文件被劫持插入恶意代码，且没有禁止ZIP目录遍历，可能导致任意代码执行。</p><p>如果解压路径中包含../字符串，就会造成目录的遍历问题，一旦遭到中间人攻击替换下载的文件，将会导致某些恶意文件被执行。</p><h3 id="解决方案-9"><a href="#解决方案-9" class="headerlink" title="解决方案"></a>解决方案</h3><p>解压缩ZIP格式文件时，注意验证其来源和完整性，并禁止解压目录遍历，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOOBIG = <span class="number">0x6400000</span>; <span class="comment">// upper limit of filesize, 100MB</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOOMANY = <span class="number">1024</span>; <span class="comment">// upper limit of entries</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">validateFilename</span><span class="params">(String filename, String intendedDir)</span> </span>&#123;</span><br><span class="line">     File f = <span class="keyword">new</span> File(filename);</span><br><span class="line">     String canonicalPath = f.getCanonicalPath();</span><br><span class="line">     File iD = <span class="keyword">new</span> File(intendedDir);</span><br><span class="line">     String canonicalID = iD.getCanonicalPath();</span><br><span class="line">     <span class="keyword">if</span> (canonicalPath.startsWith(canonicalID)) &#123;</span><br><span class="line">     <span class="keyword">return</span> canonicalPath;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"File is outside extraction target</span></span><br><span class="line"><span class="string">    directory."</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PendingIntent包含隐式Intent风险"><a href="#PendingIntent包含隐式Intent风险" class="headerlink" title="PendingIntent包含隐式Intent风险"></a>PendingIntent包含隐式Intent风险</h2><p>PendingIntent可以让其他APP中的代码像是运行自己APP中。PendingIntent的intent接收方在使用该intent时与发送方有相同的权限。在使用PendingIntent时，PendingIntent中包装的intent如果是隐式的Intent，容易遭到劫持，导致信息泄露。</p><p>PendingIntent可以调用以下几类组件发送intent：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getActivity(Context, <span class="keyword">int</span>, Intent, <span class="keyword">int</span>)</span><br><span class="line">getActivities(Context, <span class="keyword">int</span>, Intent[], <span class="keyword">int</span>)</span><br><span class="line">getBroadcast(Context, <span class="keyword">int</span>, Intent, <span class="keyword">int</span>)</span><br><span class="line">getService(Context, <span class="keyword">int</span>, Intent, <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>使用PendingIntent发送广播，漏洞代码样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(</span><br><span class="line">            <span class="string">"com.lsd.sss.action.METHOD"</span>);</span><br><span class="line">    intent.addFlags(<span class="number">32</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"app"</span>,</span><br><span class="line">    PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">0</span>, intent, <span class="number">0</span>));</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如上代码<code>PendingIntent.getBroadcast</code>，PendingItent中包含的Intent为隐式intent，因此当PendingIntent触发执行时，发送的intent很可能被嗅探或者劫持，导致intent内容泄漏。</p><h3 id="解决方案-10"><a href="#解决方案-10" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用PendingIntent时，建议使用显示Intent。</p><h2 id="剪贴板敏感信息泄露风险"><a href="#剪贴板敏感信息泄露风险" class="headerlink" title="剪贴板敏感信息泄露风险"></a>剪贴板敏感信息泄露风险</h2><p>同一部手机中安装的其他app，甚至是一些权限不高的app，都可以通过剪贴板功能获取密码管理器中的账户密码信息。原因是Android剪贴板的内容向任何权限的app开放，很容易就被嗅探泄密。</p><h3 id="解决方案-11"><a href="#解决方案-11" class="headerlink" title="解决方案"></a>解决方案</h3><p>避免使用剪贴板明文存储敏感信息。</p><h2 id="随机数使用不当漏洞"><a href="#随机数使用不当漏洞" class="headerlink" title="随机数使用不当漏洞"></a>随机数使用不当漏洞</h2><p>影响版本：Android4.2以前版本</p><p>2013年比特币开发商在一篇博客中透露，由于Android系统存在一处关键漏洞，该平台上的比特币电子钱包很容易失窃。比特币开发商称，该漏洞影响到Android平台上的每一个比特币电子钱包应用程序，包括流行的比特币钱包（Bitcoin Wallet）、blockchain.info钱包（blockchain.info wallet）、BitcoinSpinner钱包（BitcoinSpinner Wallet）和Mycelium钱包（Mycelium Wallet）等该漏洞是由于Android系统随机生成数字串安全密钥时，对SecureRandom 类的使用方式不恰当导致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SecureRandom secureRandom = <span class="keyword">new</span> SecureRandom(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;);</span><br></pre></td></tr></table></figure><p>这种方式会导致生成的随机数可以预测，导致后续依赖于该随机数的加密不安全。</p><h3 id="解决方案-12"><a href="#解决方案-12" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>不使用setSeed方法</li><li>使用/dev/urandom或者/dev/random来初始化伪随机数生成器</li></ul><h2 id="SharedPreference全局读写漏洞"><a href="#SharedPreference全局读写漏洞" class="headerlink" title="SharedPreference全局读写漏洞"></a>SharedPreference全局读写漏洞</h2><p>APP在创建SharedPreference时，将数据库设置了全局的可读权限，攻击者恶意读取SharedPreference内容，获取敏感信息。在设置SharedPreference属性时如果设置全局可写，攻击者可能会篡改、伪造内容，可以能会进行诈骗等行为，造成用户财产损失。</p><p>以下为SharedPreference全局读写的一种实现方式，漏洞代码样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    SharedPreferences r_preferences = getSharedPreferences(<span class="string">"r_preferences"</span>,</span><br><span class="line">            Context.MODE_WORLD_READABLE);</span><br><span class="line">    SharedPreferences w_preferences = getSharedPreferences(<span class="string">"w_preferences"</span>,</span><br><span class="line">            Context.MODE_WORLD_WRITEABLE);</span><br><span class="line">    SharedPreferences.Editor editor = r_preferences.edit();</span><br><span class="line">    editor.putString(<span class="string">"name"</span>, <span class="string">"James"</span>);</span><br><span class="line">    editor.putString(<span class="string">"password"</span>, <span class="string">"Gosling"</span>);</span><br><span class="line">    editor.commit();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="解决方案-13"><a href="#解决方案-13" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.用MODE_PRIVATE模式创建SharedPreference</p><p>2.避免在SharedPreference中存储明文和敏感信息</p><h2 id="数据库全局读写漏洞"><a href="#数据库全局读写漏洞" class="headerlink" title="数据库全局读写漏洞"></a>数据库全局读写漏洞</h2><p>APP在创建数据库时，将数据库设置了全局的可读权限，攻击者恶意读取数据库内容，获取敏感信息。在设置数据库属性时如果设置全局可写，攻击者可能会篡改、伪造内容，可以能会进行诈骗等行为，造成用户财产损失。<br>以下为数据库全局读写的一种实现方式，漏洞代码样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SQLiteDatabase rdb = openOrCreateDatabase(<span class="string">"all_r_db"</span>,</span><br><span class="line">                Context.MODE_WORLD_READABLE, <span class="keyword">null</span>);</span><br><span class="line">        SQLiteDatabase wdb = openOrCreateDatabase(<span class="string">"all_w_db"</span>,</span><br><span class="line">                Context.MODE_WORLD_WRITEABLE, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLiteException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="解决方案-14"><a href="#解决方案-14" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.用MODE_PRIVATE模式创建数据库</p><p>2.使用sqlcipher等工具加密数据库</p><p>3.避免在数据库中存储明文和敏感信息</p><h2 id="动态加载DEX文件风险"><a href="#动态加载DEX文件风险" class="headerlink" title="动态加载DEX文件风险"></a>动态加载DEX文件风险</h2><p>Android系统提供了一种类加载器<code>DexClassLoader</code>，在运行时动态加载执行包含在JAR或APK文件内的DEX文件。动态加载DEX文件的安全风险源于：Anroid4.1之前的系统版本允许APP动态加载存储在可以被其他应用读写的目录中的DEX文件(如sdcard)，因此不能够保护应用免遭恶意代码的劫持注入。</p><p>如果APP外部加载的DEX文件没做完整性校验，所加载的DEX易被恶意应用所劫持或者代码注入。一旦APP外部的DEX被劫持，将会执行攻击者的恶意代码，进一步实施欺诈、获取账号密码或其他恶意行为。</p><p>直接加载可以任意读写的dex、apk文件，漏洞代码样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">String apkPath = <span class="string">"/sdcard/dynamicload.apk"</span>;</span><br><span class="line">DexClassLoader calssLoader = <span class="keyword">new</span> DexClassLoader(apkPath, dexOutputDir, libPath,</span><br><span class="line">                <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>代码中直接从SDCARD上读取，并且没有对加载的文件进行校验，这种做法很容易遭到劫持。</p><h3 id="解决方案-15"><a href="#解决方案-15" class="headerlink" title="解决方案"></a>解决方案</h3><p>1.加载的APK、DEX文件时要进行合理的校验</p><p>2.动态加载的文件应该存储在APP是私有目录，防止权限泛滥导致被篡改</p><h2 id="应用数据任意备份风险"><a href="#应用数据任意备份风险" class="headerlink" title="应用数据任意备份风险"></a>应用数据任意备份风险</h2><p>当AndroidManifest.xml配置文件中没有有设置allowBackup标志(默认为true)或将allowBackup标志设置为true时，应用程序的数据可以被任意备份和恢复，恶意攻击者可以通过adb工具备份复制应用程序的数据。</p><h3 id="解决方案-16"><a href="#解决方案-16" class="headerlink" title="解决方案"></a>解决方案</h3><p>在AndroidManifest.xml文件中设置application的属性 android:allowBackup=”false”。</p><h2 id="程序可被任意调试风险"><a href="#程序可被任意调试风险" class="headerlink" title="程序可被任意调试风险"></a>程序可被任意调试风险</h2><p>在AndroidManifest.xml文件中 android:debuggable 被设置为 true时，应用程序的Java层代码可以被调试，存在潜在的风险。</p><h3 id="解决方案-17"><a href="#解决方案-17" class="headerlink" title="解决方案"></a>解决方案</h3><p>在AndroidManifest.xml文件中设置application的属性 android:debuggable=”false”，或者使用release模式编译发布的应用程序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebView组件远程代码执行漏洞&quot;&gt;&lt;a href=&quot;#WebView组件远程代码执行漏洞&quot; class=&quot;headerlink&quot; title=&quot;WebView组件远程代码执行漏洞&quot;&gt;&lt;/a&gt;WebView组件远程代码执行漏洞&lt;/h2&gt;&lt;h3 id=&quot;addJa
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>编程常用词汇</title>
    <link href="http://lisongda.com/2018/05/19/%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E8%AF%8D%E6%B1%87/"/>
    <id>http://lisongda.com/2018/05/19/编程常用词汇/</id>
    <published>2018-05-19T07:03:16.000Z</published>
    <updated>2018-07-17T12:30:07.923Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>expressiveness</td><td>表达式</td></tr><tr><td>scalebility</td><td>可扩展性</td></tr><tr><td>migration</td><td>迁移</td></tr><tr><td>footprint</td><td>占用空间</td></tr><tr><td>boilerplate</td><td>模版</td></tr><tr><td>wildcard</td><td>通配符</td></tr><tr><td>line-wrapped</td><td>自动换行</td></tr><tr><td>idiomatic</td><td>符合语法的</td></tr><tr><td>semicolon</td><td>分号</td></tr><tr><td>trivial</td><td>不重要的</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;expressiveness&lt;/td&gt;
&lt;td&gt;表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scalebility&lt;/td
      
    
    </summary>
    
    
      <category term="技术" scheme="http://lisongda.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android WebView加载本地h5问题</title>
    <link href="http://lisongda.com/2018/05/14/Android-WebView%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0h5%E9%97%AE%E9%A2%98/"/>
    <id>http://lisongda.com/2018/05/14/Android-WebView加载本地h5问题/</id>
    <published>2018-05-14T11:35:36.000Z</published>
    <updated>2018-05-30T07:17:30.457Z</updated>
    
    <content type="html"><![CDATA[<p>最近小游戏很火爆，我们的项目从半年前到现在也陆陆续续上了几款小游戏，我们的小游戏是通过h5方式实现的，之前的版本都是通过Android中WebView的<code>loadUrl</code>方法直接将h5的<code>index.html</code>加载到内存中，但是这样最大的问题就是所有的资源（包括html、js、png等等）都要通过网络加载，一个游戏所有资源将近3M，整个加载时间也比较耗时，有很多用户在这一阶段就流失掉了。所以PM这一期提的需求就是加快游戏资源的加载（从技术角度来说这也是必须要完成的），实现方式是将游戏资源打包成zip（大约1M），直接下载zip包，然后解压到本地，然后WebView直接加载本地h5即可。</p><p>乍一看方案很完美，所以就屁颠屁颠开始做了。</p><p>过程分三步：</p><blockquote><p>下载zip -&gt; 解压 -&gt; WebView加载本地资源</p></blockquote><p>然而问题出现在第三步，使用WebView加载本地资源时出现了问题：js中提示某些变量为null！如下图：</p><p><img src="/images/19.png" alt=""></p><hr><p>先简单介绍下如何使用Chrome调试Android WebView。<br>在WebView中设置<code>WebView.setWebContentsDebuggingEnabled(true);</code>，然后如图在chrome中输入<code>chrome://inspect/</code>，然后chrome就显示了我们的应用以及可以调试的WebView，点击对应的<code>inspect</code>即可。顺便说一下，使用chrome该功能我们还可以查看应用的数据库信息、SharedPrederence信息等。</p><p><img src="/images/20.png" alt=""></p><p>那么出现该bug有没有可能就是由于我们的js代码本身问题呢？我将游戏资源交给服务端同学，让他们部署到沙河环境，抑或是自己的电脑使用tomcat创建本地服务，然后通过直接加载Url的方式都是可以正常运行游戏的，但是将相同的游戏资源push到手机内，通过WebView访问就是不可以的。另外使用本地html方法加载不同的游戏都会出现问题，所以我觉得真的不是游戏代码本身的问题，而是我们的WebView的某些设置出现了问题。</p><p>最开始的时候我是将游戏资源放置到内部存储，即<code>/data/data/包名/....</code>,后来我试着改成sdcard存储，依旧是不行。</p><p>内部存储时:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWebView.loadUrl(<span class="string">"file:///"</span>+CustomApp.getContext().getFilesDir()+<span class="string">"/game/index.html"</span>);</span><br></pre></td></tr></table></figure><p>外部存储时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWebView.loadUrl(<span class="string">"file:///mnt/sdcard/game/index.html"</span>);</span><br></pre></td></tr></table></figure><p>当看到报错信息是<code>Uncaught TypeError: Cannot read property &#39;modules&#39; of null</code>时，第一感觉当然是去google，<a href="https://stackoverflow.com/questions/33079762/android-webview-uncaught-typeerror-cannot-read-property-getitem-of-null" target="_blank" rel="noopener">stackoverflow</a>上真的有相关解答,答案如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebSettings settings = webView.getSettings();</span><br><span class="line">settings.setDomStorageEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>setDomStorageEnabled这个方法的作用是什么呢？</p><blockquote><p>DOM Storage：存储一些简单的用key/value对即可解决的数据，根据作用范围的不同，有Session Storage和Local Storage两种，分别用于会话级别的存储（页面关闭即消失）和本地化存储（除非主动删除，否则数据永远不会过期）在Android中可以手动开启DOM Storage（setDomStorageEnabled）。</p></blockquote><p>当满怀期待的设置该方法后，结果还是不可以。</p><p>细想一下，为什么出现变量为null呢？猜想是由于没有加载到部分资源。下面来验证一下：</p><p>我们拿到正常情况下的游戏的加载资源：<br>如图：</p><p><img src="/images/23.png" alt=""></p><p>然后再看下异常情况下的游戏资源：</p><p><img src="/images/22.png" alt=""></p><p>异常情况下确实少了很多图片资源，那么是否是由于文件访问的限制导致图片资源无法加载，所以才会导致某些变量为null呢？js中加载资源的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res_gaming = &#123;</span><br><span class="line">background: <span class="string">"res/img/background.png"</span>,</span><br><span class="line">game_ccb: <span class="string">"res/ccb/GameCCB.ccbi"</span>,</span><br><span class="line">game_bg: <span class="string">"res/img/game_bg.png"</span>,</span><br><span class="line">img_1_png: <span class="string">"res/img/img_1.png"</span>,</span><br><span class="line">img_1_plist: <span class="string">"res/img/img_1.plist"</span>,</span><br><span class="line">lose: <span class="string">"res/img/lose.png"</span>,</span><br><span class="line">win: <span class="string">"res/img/win.png"</span>,</span><br><span class="line">time_fnt: <span class="string">"res/img/time.fnt"</span>,</span><br><span class="line">time_png: <span class="string">"res/img/time.png"</span>,</span><br><span class="line">share_plist: <span class="string">"res/img/share.plist"</span>,</span><br><span class="line">share_png: <span class="string">"res/img/share.png"</span>,</span><br><span class="line">beginFont_fnt: <span class="string">"res/img/beginFont.fnt"</span>,</span><br><span class="line">begin_ccbi: <span class="string">"res/ccb/Begin.ccbi"</span>,</span><br><span class="line">beginFont_png: <span class="string">"res/img/beginFont.png"</span></span><br><span class="line">&#125;,</span><br><span class="line">res_music = &#123;</span><br><span class="line">effect_lose: <span class="string">"res/music/effect_lose.mp3"</span>,</span><br><span class="line">effect_move: <span class="string">"res/music/effect_move.mp3"</span>,</span><br><span class="line">effect_bomb: <span class="string">"res/music/effect_bomb.mp3"</span>,</span><br><span class="line">effect_win: <span class="string">"res/music/effect_win.mp3"</span>,</span><br><span class="line">music_bg: <span class="string">"res/music/music_bg.mp3"</span>,</span><br><span class="line">UI_mp3: <span class="string">"res/music/UI.mp3"</span></span><br><span class="line">&#125;,</span><br><span class="line">res_loading = &#123;</span><br><span class="line">loading_ccb: <span class="string">"res/ccb/LoadingCCB.ccbi"</span>,</span><br><span class="line">public_png: <span class="string">"res/img/public.png"</span>,</span><br><span class="line">public_plist: <span class="string">"res/img/public.plist"</span>,</span><br><span class="line">background: <span class="string">"res/img/background.png"</span>,</span><br><span class="line">loading_plist: <span class="string">"res/img/loading.plist"</span>,</span><br><span class="line">loading_png: <span class="string">"res/img/loading.png"</span>,</span><br><span class="line">loading_1_png: <span class="string">"res/img/loading_1.png"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>先不管这个思路对不对，大胆的尝试总好过于原地踏步。</p><p>我发现WebView有以下三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 设置是否允许 WebView 使用 File 协议</span></span><br><span class="line">mWebView.getSettings().setAllowFileAccess(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置是否允许通过 file url 加载的 Js代码读取其他的本地文件</span></span><br><span class="line">mWebView.getSettings().setAllowFileAccessFromFileURLs(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置是否允许通过 file url 加载的 Javascript 可以访问其他的源(包括http、https等源)</span></span><br><span class="line">mWebView.getSettings().setAllowUniversalAccessFromFileURLs(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>看方法名字是正合我意啊，但是。。。结果依旧没用。而且这三个方法好像还可能造成安全漏洞。详见<a href="https://blog.csdn.net/carson_ho/article/details/64904635" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/64904635</a>。</p><p>周一上班后，我与同事讨论了下该情况，仔细想想其实也可能是因为程序异常所以导致图片资源没有加载，如果真是这样，那就本末倒置了。</p><hr><p>后来在网上查阅Android WebView加载本地html时，大家给出的方法都是将h5资源放入到Android<br> Studio的assets目录下，然后以assets方式去加载h5。所以我尝试将h5相关资源全部放入到assets目录下，看看这样是否还报错。如图：</p><p> <img src="/images/24.png" alt=""></p><p> WebView加载h5:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWebView.loadUrl(<span class="string">"file:///android_asset/10001single/index.html"</span>);</span><br></pre></td></tr></table></figure><p>以这种方式加载游戏是没有问题的。但是。。。</p><p>首先可以确定的是这样的方式是肯定无法满足我们的需求的，因为assets的资源需要打包进apk的，属于预置资源，然而我们的游戏资源是需要实时从网络中加载的。那么如果我们将游戏资源下载到assets目录下呢？很遗憾，assets目录下的资源只能读取无法写入。</p><p>所以现在来总结一下：相同的一份游戏代码，放到服务端加载没有问题，使用本地tomcat加载没有问题，放入assets目录下加载没有问题，从本地加载就有问题。</p><p>直到现在我也认为是WebView的一些配置不当，导致从本地加载h5资源出现问题。但是试过了可能的一些方法后仍然是不可以。</p><hr><p>直到我看到了这两篇文章：</p><p><a href="http://asialee.iteye.com/blog/2043289" target="_blank" rel="noopener">android关于加载本地html5的问题</a></p><p><a href="http://asialee.iteye.com/blog/2043291" target="_blank" rel="noopener">android关于加载本地html5的问题(解决办法)</a></p><p>文章里的意思就是webkit内核禁止<code>Ajax</code>加载本地html5，还有浏览器的安全性设置问题。</p><p>这篇文章是很久以前的了，现在是否有这个问题有待考究，不过里面涉及的一些问题倒是蛮符合我的bug。更重要的是，文章里提到的解决方案，让我眼前一亮：既然从网络中加载h5没有问题，那么为何不让手机本地创建一个server作为服务端呢？</p><p>这里使用nanohttpd创建server：</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Environment;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fi.iki.elonen.NanoHTTPD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServer</span> <span class="keyword">extends</span> <span class="title">NanoHTTPD</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MIME_JAVASCRIPT = <span class="string">"text/javascript"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MIME_CSS = <span class="string">"text/css"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MIME_JPEG = <span class="string">"image/jpeg"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MIME_PNG = <span class="string">"image/png"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MIME_SVG = <span class="string">"image/svg+xml"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MIME_JSON = <span class="string">"application/json"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">8080</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">serve</span><span class="params">(IHTTPSession session)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String mime_type = NanoHTTPD.MIME_PLAINTEXT;</span><br><span class="line">        Method method = session.getMethod();</span><br><span class="line">        String uri = session.getUri();</span><br><span class="line">        System.out.println(method + <span class="string">" '"</span> + uri + <span class="string">"' "</span>);</span><br><span class="line">        InputStream descriptor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.toString().equalsIgnoreCase(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">            String path;</span><br><span class="line">            <span class="keyword">if</span> (uri.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">                path = <span class="string">"/index.html"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                path = uri;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (path.endsWith(<span class="string">".js"</span>)) &#123;</span><br><span class="line">                        mime_type = MIME_JAVASCRIPT;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">".css"</span>)) &#123;</span><br><span class="line">                        mime_type = MIME_CSS;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">".html"</span>)) &#123;</span><br><span class="line">                        mime_type = MIME_HTML;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">".jpeg"</span>)) &#123;</span><br><span class="line">                        mime_type = MIME_JPEG;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">".png"</span>)) &#123;</span><br><span class="line">                        mime_type = MIME_PNG;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">".jpg"</span>)) &#123;</span><br><span class="line">                        mime_type = MIME_JPEG;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">".svg"</span>)) &#123;</span><br><span class="line">                        mime_type = MIME_SVG;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">".json"</span>)) &#123;</span><br><span class="line">                        mime_type = MIME_JSON;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            String sub = path.substring(path.indexOf(<span class="string">"lsd"</span>) + <span class="number">4</span>);</span><br><span class="line">            <span class="comment">// LogHelper.d("lsd", "path:" + path);</span></span><br><span class="line">            <span class="comment">// LogHelper.d("lsd", "sub:" + sub);</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory() + <span class="string">"/lsd/"</span> + sub);</span><br><span class="line">                descriptor = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                Log.w(<span class="string">"Httpd"</span>, ioe.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> newFixedLengthResponse(Response.Status.OK, mime_type, descriptor, descriptor.available());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时WebView加载的url变为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWebView.loadUrl(<span class="string">"http://127.0.0.1:8080/mnt/sdcard/lsd/index.html"</span>);</span><br></pre></td></tr></table></figure><p>试了一下，success！</p><p>在之后的测试中发现有时会出现加载失败的情况，经调试nanoHttpd多响应了一次“/favicon.ico”，而我们的资源文件中实际上并没有该文件，所以要将这次请求单独处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (uri.endsWith(<span class="string">"favicon.ico"</span>)) &#123;</span><br><span class="line">   <span class="keyword">return</span> newFixedLengthResponse(<span class="string">""</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><p>后期QA同学测试的时候，发现了一个深坑：</p><p>在玩完单人版的游戏后，加载双人版游戏一定会出问题！（游戏分为单人版和双人版，分别对应不同h5资源）</p><p>双人游戏之间不会相互影响，单人游戏之间也不会相互影响，双人游戏不会影响单人游戏，但是单人游戏会影响双人游戏！如果将app进程kill掉，则双人游戏又恢复正常。</p><p>问题具体表现为：</p><p>游戏资源加载不完整。即部分图片或者js没有加载。</p><p>我以为是单人游戏的缓存可能影响到了双人游戏缓存，所以导致双人游戏加载错误。WebView缓存分为RAM缓存和本地缓存，由于将App Kill掉后双人游戏又可以正常进行，所以初步定为为RAM缓存问题。那么尝试在单人游戏结束后将RAM缓存清理即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清理一个应用中所有WebView使用的缓存</span></span><br><span class="line">mWebView.clearCache(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>参数false表示只清理RAM缓存。结果双人游戏还是无法正常运行。</p><p>后来我又尝试了将WebView的缓存模式设置为LOAD_NO_CACHE。即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebSettings settings = mWebView.getSettings();</span><br><span class="line">settings.setCacheMode(WebSettings.LOAD_NO_CACHE);</span><br></pre></td></tr></table></figure><p> 结果依然无效。</p><p> 此路不通。</p><p> 既然问题表现为部分资源没有下载，那么我就尝试跟到js中具体加载资源的代码部分，通过log观察是否程序运行到了这一步。</p><p> 当我跟到了这个run方法中调用的的setInterval方法时：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">run: function(a) &#123;</span><br><span class="line">     var b = <span class="keyword">this</span></span><br><span class="line">       , c = function() &#123;</span><br><span class="line">         a &amp;&amp; (b.config[b.CONFIG_KEY.id] = a);</span><br><span class="line">         b._prepareCalled || b.prepare(function() &#123;</span><br><span class="line">             b._prepared = !<span class="number">0</span></span><br><span class="line">         &#125;);</span><br><span class="line">         cc._supportRender &amp;&amp; (b._checkPrepare = setInterval(function() &#123;</span><br><span class="line">             b._prepared &amp;&amp; (cc._setup(b.config[b.CONFIG_KEY.id]),</span><br><span class="line">             b._runMainLoop(),</span><br><span class="line">             b._eventHide = b._eventHide || <span class="keyword">new</span> cc.EventCustom(b.EVENT_HIDE),</span><br><span class="line">             b._eventHide.setUserData(b),</span><br><span class="line">             b._eventShow = b._eventShow || <span class="keyword">new</span> cc.EventCustom(b.EVENT_SHOW),</span><br><span class="line">             b._eventShow.setUserData(b),</span><br><span class="line">             b.onStart(),</span><br><span class="line">             clearInterval(b._checkPrepare))</span><br><span class="line">         &#125;, <span class="number">10</span>))</span><br><span class="line">     &#125;;</span><br><span class="line">     document.body ? c() : cc._addEventListener(window, <span class="string">"load"</span>, function() &#123;</span><br><span class="line">         <span class="keyword">this</span>.removeEventListener(<span class="string">"load"</span>, arguments.callee, !<span class="number">1</span>);</span><br><span class="line">         c()</span><br><span class="line">     &#125;, !<span class="number">1</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 我发线setInterval方法里的定时任务并没有执行，而在这个方法里的<code>b.onStart()</code>是游戏资源的加载。难道是我们的这个setInterval方法有问题吗？可是如果有问题，那么为什么只加载双人游戏的时候这段代码可以正常执行呢？只有加载了单人游戏后，这段代码就不再执行了。</p><p>我将setInterval方法里的执行逻辑单独拿出来，将setInterval这层壳去掉，发现里面的逻辑果然执行了。那么现在就有两个问题：第一，为什么这个setInterval方法不会执行呢？第二，如果我将setInterval方法里的逻辑抽出来立刻执行（不影响其他逻辑），我们的游戏是否就可以正常玩耍了呢？</p><p>对于第一个问题，我们在文章的最后会进行解答。对于第二个问题，答案是不可以，这么做是可以保证这段代码成功执行，但是接着走下去，又会有其他的问题。在此就不贴出问题了。因为我们的js代码有5万多行，我很清楚，这样一个个填坑绝对不是正道。况且有足够的理由支撑我这样做：只加载双人游戏是没问题的！</p><p>看来此路也是行不通。</p><p>现在我们从java层看这个问题，单人游戏和双人游戏有什么区别呢？由于业务要求，我们单人游戏使用的WebView直接放置在Activity中，而双人游戏的WebView则放在Fragment中，那么是否是因为这个原因呢？我将双人游戏使用的Fragment放在的单人游戏的Activity中，然后将单人游戏的Activity使用的原WebView相关代码全部注释掉，惊奇的发现竟然可以了！！！</p><p>那么原因渐渐找到了，是单人游戏中的WebView的某些设置有问题。</p><p>通过将WebView的相关代码一行行注释，终于发现了罪魁祸首：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStart();</span><br><span class="line">    mWebView.onResume();     </span><br><span class="line">    mWebView.resumeTimers();  <span class="comment">//&lt;----------</span></span><br><span class="line">    <span class="keyword">if</span> (mGameSession.lIsStartLoading) &#123;</span><br><span class="line">        mJsIface.loadUrl(GameSession.JsFunc.ON_GAME_START);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStop();</span><br><span class="line">    <span class="keyword">if</span> (mGameSession.lIsStartLoading &amp;&amp; !isFinishing()) &#123;</span><br><span class="line">        mJsIface.loadUrl(GameSession.JsFunc.ON_GAME_STOP);</span><br><span class="line">    &#125;</span><br><span class="line">    mWebView.onPause();</span><br><span class="line">    mWebView.pauseTimers();   <span class="comment">//&lt;----------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头所指的两行，在Activity onStart的时候，会调用<code>mWebView.resumeTimers();</code>;在Activity OnStop的时候，会调用<code>mWebView.pauseTimers();</code>。那么这两个方法的作用是什么呢？</p><blockquote><p>pauseTimers, onPause 停止解析,javascript执行等操作.区别是 onPause 只作用于调用它的WebView,而 pauseTimers 作用于当前应用中所有的WebView。</p><p>resumeTimers, onResume 恢复解析,javascript执行等操作.区别是 onResume 只作用于调用它的WebView,而 resumeTimers 作用于当前应用中所有的WebView。</p></blockquote><p>也就是说在单人游戏结束时，我们将应用中所有的WebView都执行了pauseTimers方法，经检查在双人游戏开始时并没有调用resumeTimers方法。才导致h5资源加载不完整。这也正好解释了上面js中setInterval方法为什么不调用！！！</p><p>问题找到了，在双人游戏开始前调用WebView的resumeTimers方法即可。</p><hr><p>ok, 为什么直接从本地加载html会出现异常这个问题一直在困扰我，我决定从头梳理一下，经过定位我最终发现了问题所在，如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">loadTxt: <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cc._isNodeJs) <span class="built_in">require</span>(<span class="string">"fs"</span>).readFile(a, <span class="function"><span class="keyword">function</span>(<span class="params">a, c</span>) </span>&#123;</span><br><span class="line">a ? b(a) : b(<span class="literal">null</span>, c.toString())</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">this</span>.getXMLHttpRequest(),</span><br><span class="line">d = <span class="string">"load "</span> + a + <span class="string">" failed!"</span>;</span><br><span class="line">c.open(<span class="string">"GET"</span>, a, !<span class="number">0</span>);</span><br><span class="line">/msie/i.test(navigator.userAgent) &amp;&amp; !<span class="regexp">/opera/i</span>.test(navigator.userAgent) ? (c.setRequestHeader(<span class="string">"Accept-Charset"</span>, <span class="string">"utf-8"</span>), c.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">4</span> === c.readyState &amp;&amp; (<span class="number">200</span> === c.status ? b(<span class="literal">null</span>, c.responseText) : b(&#123;</span><br><span class="line">status: c.status,</span><br><span class="line">errorMessage: d</span><br><span class="line">&#125;, <span class="literal">null</span>))</span><br><span class="line">&#125;) : (c.overrideMimeType &amp;&amp; c.overrideMimeType(<span class="string">"text/plain; charset\x3dutf-8"</span>), c.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="number">0</span> &lt;= c._timeoutId &amp;&amp; clearTimeout(c._timeoutId);</span><br><span class="line"><span class="number">4</span> === c.readyState &amp;&amp; (<span class="number">200</span> === c.status ? b(<span class="literal">null</span>, c.responseText) : b(&#123;</span><br><span class="line">status: c.status,</span><br><span class="line">errorMessage: d</span><br><span class="line">&#125;, <span class="literal">null</span>))</span><br><span class="line">&#125;, c.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">b(&#123;</span><br><span class="line">status: c.status,</span><br><span class="line">errorMessage: d</span><br><span class="line">&#125;, <span class="literal">null</span>)</span><br><span class="line">&#125;, <span class="keyword">void</span> <span class="number">0</span> === c.ontimeout &amp;&amp; (c._timeoutId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">c.ontimeout()</span><br><span class="line">&#125;, c.timeout)), c.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">b(&#123;</span><br><span class="line">status: c.status,</span><br><span class="line">errorMessage: <span class="string">"Request timeout: "</span> + d</span><br><span class="line">&#125;, <span class="literal">null</span>)</span><br><span class="line">&#125;);</span><br><span class="line">c.send(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>问题根源就在于XHR不支持加载本地file，其实我们也没有必要一定使用XHR方式去加载，而是使用js中的一些File API去加载。当然我们也可以自己创建一个轻量级的web server，来将file域的文件转化为http形式。</p><p>现在想一想当初真的走了很多弯路。</p><p>在<a href="https://stackoverflow.com/questions/7683596/xmlhttprequest-for-local-files?answertab=votes#tab-top" target="_blank" rel="noopener">stackoverflow</a>上相关问题的一个回答完美的总结了该问题：</p><blockquote><p>Historically, you can’t query for local files from JavaScript (or shouldn’t be allowed to, or something’s odd). This would be a serious breach of security.</p></blockquote><blockquote><p>There are only a few circumstances where you can do this, but in general they involve specific security settings requiring to be set for your browser, to either lift the limitation or to notify the current page’s execution process that that is is granted this exceptional right. This is for instance doable in Firefox by editing the properties. It’s also commonly OK when developing browser extensions (for instance for Chrome or FF) if they request the file access permissions.</p></blockquote><blockquote><p>Another way to go around this limitation is to host a local web-server, and to declare virtual hosts on it to be able to do this sort of AJAX request to fetch local files. It’s quite common for web-developers to resort to this trick (more like a standard, really) to have the benefits of local development but at the same time replicate a production system. You could for instance use a lightweight web-server like Jetty.</p></blockquote><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近小游戏很火爆，我们的项目从半年前到现在也陆陆续续上了几款小游戏，我们的小游戏是通过h5方式实现的，之前的版本都是通过Android中WebView的&lt;code&gt;loadUrl&lt;/code&gt;方法直接将h5的&lt;code&gt;index.html&lt;/code&gt;加载到内存中，但是这
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
      <category term="Webview" scheme="http://lisongda.com/tags/Webview/"/>
    
  </entry>
  
  <entry>
    <title>DownLoadManager不展示通知栏</title>
    <link href="http://lisongda.com/2018/05/09/DownLoadManager%E4%B8%8D%E5%B1%95%E7%A4%BA%E9%80%9A%E7%9F%A5%E6%A0%8F/"/>
    <id>http://lisongda.com/2018/05/09/DownLoadManager不展示通知栏/</id>
    <published>2018-05-09T03:32:58.000Z</published>
    <updated>2018-05-09T03:51:02.742Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个下载的需求，因为Android原生有一个DownLoadManager，通过简单调研，觉得它很不错，于是就开始做了。。。</p><p>因为我们的下载是不需要显示通知栏的，而DownLoadManager则需要一句话则可以达到要求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">downRequest.setNotificationVisibility(DownloadManager.Request.VISIBILITY_HIDDEN);</span><br></pre></td></tr></table></figure><p>把整体框架打完后，一测试，crash。。。。</p><blockquote><p>Caused by: java.lang.SecurityException: Invalid value for visibility: 2<br>    at android.os.Parcel.readException(Parcel.java:1592)<br>    at android.database.DatabaseUtils.readExceptionFromParcel(DatabaseUtils.java:190)<br>    at android.database.DatabaseUtils.readExceptionFromParcel(DatabaseUtils.java:142)<br>    at android.content.ContentProviderProxy.insert(ContentProviderNative.java:476)<br>    at android.content.ContentResolver.insert(ContentResolver.java:1207)<br>    at android.app.DownloadManager.enqueue(DownloadManager.java:946)</p></blockquote><p>原因竟然是隐藏通知栏需要权限！！！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--DownloadManager下载时不显示Notification--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.DOWNLOAD_WITHOUT_NOTIFICATION"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>由于新增权限会大大影响app的升级率，我们的PM是不允许增加新权限的。。。只能放弃DownloadManager这个方案了。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个下载的需求，因为Android原生有一个DownLoadManager，通过简单调研，觉得它很不错，于是就开始做了。。。&lt;/p&gt;
&lt;p&gt;因为我们的下载是不需要显示通知栏的，而DownLoadManager则需要一句话则可以达到要求：&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>使用getSimpleName()作为Fragment的TAG时的潜在风险</title>
    <link href="http://lisongda.com/2018/04/26/%E4%BD%BF%E7%94%A8getSimpleName-%E4%BD%9C%E4%B8%BAFragment%E7%9A%84TAG%E6%97%B6%E7%9A%84%E6%BD%9C%E5%9C%A8%E9%A3%8E%E9%99%A9/"/>
    <id>http://lisongda.com/2018/04/26/使用getSimpleName-作为Fragment的TAG时的潜在风险/</id>
    <published>2018-04-26T12:43:05.000Z</published>
    <updated>2018-04-29T14:19:41.463Z</updated>
    
    <content type="html"><![CDATA[<p>本文翻译自<a href="https://medium.com/@elye.project/the-danger-of-using-class-getsimplename-as-tag-for-fragment-5cdf3a35bfe2" target="_blank" rel="noopener">https://medium.com/@elye.project/the-danger-of-using-class-getsimplename-as-tag-for-fragment-5cdf3a35bfe2</a></p><p> 当我们在Activity中添加一个Fragment时，我们通常会使用TAG作为它的id。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().beginTransaction()</span><br><span class="line">        .add(containerResource, fragment, fragmentTAG).commit();</span><br></pre></td></tr></table></figure><p>一般情况下我们都会选择类名作为这里的fragmentTag。为了简化，这里的类名并不包含包名。当然前提是我们知道项目中不同的包下没有重名的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MyClassFragment.class.getSimpleName();</span><br></pre></td></tr></table></figure><p>当需要使用该fragment时，我们通过findFragmentByTag方法获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fragment = getFragmentManager().findFragmentByTag(tag);</span><br></pre></td></tr></table></figure><p>一般情况下这样做是没有什么问题的，即使是在混淆后。</p><p>真的没有问题吗？</p><p>尽管类不同，但是它们还是可能使用<strong>相同的Tag</strong>。</p><p>How this happen？</p><p>假设现在有两个fragment，以及它们在混淆后的类名如下：</p><blockquote><p>com.mypackage1.FragmentA → com.mypackage1.a</p><p>com.mypackage2.FragmentB → com.mypackage2.a</p></blockquote><p>这样也是没有问题的，但是如果使用<code>simple name</code>呢？</p><blockquote><p>com.mypackage1.FragmentA → a</p><p>com.mypackage2.FragmentB → a</p></blockquote><p>！！！</p><p>也许出现这种情况的概率并不是很大，但也是有可能出现的。</p><p>为了不出现这种情况，可以有如下几种解决方案：</p><ul><li>使用<code>full name</code></li><li>使用别名</li><li>使用字符串常量</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文翻译自&lt;a href=&quot;https://medium.com/@elye.project/the-danger-of-using-class-getsimplename-as-tag-for-fragment-5cdf3a35bfe2&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
      <category term="Fragment" scheme="http://lisongda.com/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment的一些坑总结</title>
    <link href="http://lisongda.com/2018/04/26/Android-Fragment%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    <id>http://lisongda.com/2018/04/26/Android-Fragment的一些坑总结/</id>
    <published>2018-04-26T06:31:06.000Z</published>
    <updated>2018-04-29T14:21:19.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="getActivity-为null"><a href="#getActivity-为null" class="headerlink" title="getActivity()为null"></a>getActivity()为null</h2><p>  在一些情况下会遇到framgnet的getActivity()方法为null的问题。</p><p>  比如：fragment中的异步回调方法，假设此时fragment已经onDetach了，那么此时getActivity()获取到的值为null；Activity意外销毁重建后，系统会自动保存并回复framgnet，导致此时fragment重叠，而旧的fragment取到的activity为null。</p><p>  解决方案：</p><ul><li><p>直接判断<code>getActivity()!=null</code>,简单粗暴，如果不影响业务逻辑是可以接受的。</p></li><li><p>onAttach中将上下文进行保存，但是有可能会造成内存泄漏。</p></li></ul><h2 id="java-lang-IllegalStateException-Can-not-perform-this-action-after-onSaveInstanceState"><a href="#java-lang-IllegalStateException-Can-not-perform-this-action-after-onSaveInstanceState" class="headerlink" title="java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState"></a>java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState</h2><p>  出现这种异常信息的常用场景有两个：</p><ul><li><p>在系统调用activity的onSaveInstanceState()方法后加载fragment时会报上述异常。</p><p> 解决方案：在业务允许情况下，使用<code>commitAllowingStateLoss</code>代替<code>commit</code>。</p></li><li><p>系统调用了onSaveInstanceState方法后，用户调用了onBackPressed方法。</p><p> 解决方案：</p><ul><li>重写activity不的onSaveInstanceState方法，不调用super的onSaveInstanceState方法 。并不推荐，会丢掉其他状态信息。</li><li>重写onBackPressed方法，不调用super.onBackPressed()，直接finish()。其实这种方法也不是很推荐，因为如果此时有fragment，那么点击back会把fragment和activity一起finish掉。</li><li><p>在onBackPressed方法里，手动更改是否调用了onSaveInstanceState方法的flag。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123; </span><br><span class="line">onStateNotSaved(); </span><br><span class="line"><span class="keyword">super</span>.onBackPressed();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;getActivity-为null&quot;&gt;&lt;a href=&quot;#getActivity-为null&quot; class=&quot;headerlink&quot; title=&quot;getActivity()为null&quot;&gt;&lt;/a&gt;getActivity()为null&lt;/h2&gt;&lt;p&gt;  在一些情况下
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
      <category term="Fragment" scheme="http://lisongda.com/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Android ConstraintLayout GuideLine适配RTL</title>
    <link href="http://lisongda.com/2018/04/25/Android-ConstraintLayout-GuideLine%E9%80%82%E9%85%8DRTL/"/>
    <id>http://lisongda.com/2018/04/25/Android-ConstraintLayout-GuideLine适配RTL/</id>
    <published>2018-04-25T06:22:00.000Z</published>
    <updated>2018-04-29T14:21:11.077Z</updated>
    
    <content type="html"><![CDATA[<p>ConstraintLayout中GuideLine是一个非常好用的控件，我形容它为“隐身的监管者”。在使用它时出现了一个问题，它的<code>app:layout_constraintGuide_percent</code>属性无法适配rtl，所以当我们切换将手机语言设置切换阿拉伯语或者强制设置为TRL时，UI的变化就不是我们预期的了。</p><p>举个例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".ThirdActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">"0.4"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在屏幕左侧40%处添加一个竖直GuideLine，在GuideLine右侧20dp处添加一个button，效果如下：</p><p><img src="/images/16.png" alt=""></p><p>当切换RTL时，结果为：</p><p><img src="/images/17.png" alt=""></p><p> 很明显这不是我们想要的效果，我们想要GuideLine从屏幕右侧开始的40%处。即：</p><p> <img src="/images/18.png" alt=""></p><p> 解决方案如下：</p><p> 既然系统无法为我们自动适配，那么就需要手动适配RTL：</p><p> values/dimens.xml：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"guideline_percent"</span> <span class="attr">format</span>=<span class="string">"float"</span> <span class="attr">type</span>=<span class="string">"dimen"</span>&gt;</span>0.4<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p> values-ldrtl/dimens.xml:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"guideline_percent"</span> <span class="attr">format</span>=<span class="string">"float"</span> <span class="attr">type</span>=<span class="string">"dimen"</span>&gt;</span>0.6<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 或者在<code>layout-ldrtl</code>下重写layout。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ConstraintLayout中GuideLine是一个非常好用的控件，我形容它为“隐身的监管者”。在使用它时出现了一个问题，它的&lt;code&gt;app:layout_constraintGuide_percent&lt;/code&gt;属性无法适配rtl，所以当我们切换将手机语言设置
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
      <category term="ConstraintLayout" scheme="http://lisongda.com/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>mac Chrome常用快捷键</title>
    <link href="http://lisongda.com/2018/04/22/mac-Chrome%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://lisongda.com/2018/04/22/mac-Chrome常用快捷键/</id>
    <published>2018-04-22T08:12:58.000Z</published>
    <updated>2018-04-22T09:40:25.460Z</updated>
    
    <content type="html"><![CDATA[<ul><li>打开新窗口：⌘ + n</li><li>打开新tab：⌘ + t</li><li>在无痕模式下打开新窗口：⌘ + Shift + n</li><li>重新打开最后关闭的标签页，并跳转到该标签页：⌘ + Shift + t</li><li>跳转到下一个打开的标签页：⌘ + Option + 向右箭头键</li><li>跳转到上一个打开的标签页：⌘ + Option + 向左箭头键</li><li>跳转到最后一个标签页：⌘ + 9</li><li>关闭当前标签页或弹出式窗口：⌘ + w</li><li>关闭当前窗口：⌘ + Shift + w</li><li>重新加载当前网页：⌘ + R</li><li>重新加载当前网页（忽略缓存的内容）：⌘ + Shift + r</li><li>最小化窗口：⌘ + m</li><li>隐藏 Google Chrome：⌘ + h</li><li>退出 Google Chrome：⌘ + q</li><li>打开“开发者工具”：⌘ + Option + i</li><li>为网站名称添加 www. 和 .com，并在当前标签页中打开该网站：输入网站名称并按 Control + Enter 键</li><li>为网站名称添加 www. 和 .com，并在新标签页中打开该网站：输入网站名称并按 Control + Shift + Enter 键</li><li>停止加载网页：Esc</li><li>放大网页上的所有内容：⌘ 和 +</li><li>缩小网页上的所有内容：⌘ 和 -</li><li>打开当前标签页浏览记录中记录的上一个页面：⌘ + [ 或 ⌘ + 向左箭头键</li><li>打开当前标签页浏览记录中记录的下一个页面：⌘ + ] 或 ⌘ + 向右箭头键       </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;打开新窗口：⌘ + n&lt;/li&gt;
&lt;li&gt;打开新tab：⌘ + t&lt;/li&gt;
&lt;li&gt;在无痕模式下打开新窗口：⌘ + Shift + n&lt;/li&gt;
&lt;li&gt;重新打开最后关闭的标签页，并跳转到该标签页：⌘ + Shift + t&lt;/li&gt;
&lt;li&gt;跳转到下一个打开
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="chrome" scheme="http://lisongda.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Android Activity相关</title>
    <link href="http://lisongda.com/2018/04/21/Android-Activity%E7%9B%B8%E5%85%B3/"/>
    <id>http://lisongda.com/2018/04/21/Android-Activity相关/</id>
    <published>2018-04-21T13:25:44.000Z</published>
    <updated>2018-04-28T09:10:02.998Z</updated>
    
    <content type="html"><![CDATA[<ul><li>从Activity A打开Activity B，A和B的生命周期如何变化？</li></ul><ol><li>A–&gt;onPause()</li><li>B–&gt;onCreate()–&gt;onStart()–&gt;onResume()</li><li>A–&gt;onStop()</li></ol><ul><li><p>在弹出一个半透明的activity（比如Dialog）时，原Activity会调用onPause(),不会调用onStop();在Android 7.0及以上多窗口模式下，一个App获取焦点后，其他App会调用onPause();</p></li><li><p>可以使用onCreate或者onRestoreInstanceState方法来恢复Activity保存的数据，不同的是使用onCreate时，需要判断<code>savedInstanceState != null</code>，而使用onRestoreInstanceState不需要做上面的判断。</p></li><li><p>关于进程间传递数据，尽量不使用自定义Parcelable类。如果两个进程之间的Parcelable类的定义不一样，就会出现问题。在使用AlarmManager传递Intent数据时，不要使用自定义Parcelable类，系统会修改intent里的数据，所以无法识别自定义的Parcelable类，导致我们从Intent中取到的数据为空（在Android 6.0及以上）。<a href="https://developer.android.com/guide/components/activities/parcelables-and-bundles.html#sdbp" target="_blank" rel="noopener">官方文档</a>.<a href="https://medium.com/@hanru.yeh/alarms-pendingintents-cannot-include-custom-parcelable-class-instances-on-android-n-93a64aeedb33" target="_blank" rel="noopener">medium相关文章</a></p></li></ul><ul><li><p>当进行Preference配置的时候，可以使用PreferenceFragment或者PreferenceActivity。</p></li><li><p>在使用隐式Intent打开Activity时，首先要判断是否有能够处理这样的Intent的Activity存在，否则会crash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> PackageManager packageManager = getPackageManager();</span><br><span class="line">List&lt;ResolveInfo&gt; activities = packageManager.queryIntentActivities(intent,</span><br><span class="line">        PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line">boolean isIntentSafe = activities.size() &gt; 0;</span><br></pre></td></tr></table></figure></li></ul><p> * </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;从Activity A打开Activity B，A和B的生命周期如何变化？&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;A–&amp;gt;onPause()&lt;/li&gt;
&lt;li&gt;B–&amp;gt;onCreate()–&amp;gt;onStart()–&amp;gt;onResume()&lt;/l
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Activity" scheme="http://lisongda.com/tags/Activity/"/>
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android动画系列之三使用Transition进行Layout动画</title>
    <link href="http://lisongda.com/2018/04/14/Android%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89%E4%BD%BF%E7%94%A8Transition%E8%BF%9B%E8%A1%8CLayout%E5%8A%A8%E7%94%BB/"/>
    <id>http://lisongda.com/2018/04/14/Android动画系列之三使用Transition进行Layout动画/</id>
    <published>2018-04-14T09:15:06.000Z</published>
    <updated>2018-04-16T06:09:35.913Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习总结于<a href="https://developer.android.com/training/transitions/index.html" target="_blank" rel="noopener">https://developer.android.com/training/transitions/index.html</a>。</p><p>本文所有<a href="https://github.com/Brooks0129/Transition" target="_blank" rel="noopener">Demo地址</a></p><p>Android 4.4.2 (API level 19)引入Transition框架，我们只要提供动画的起始时的layout和终止时的layout，Transition会自动帮我们完成布局动画的过渡，同时为我们提供了几种可选的过渡方式，例如淡入淡出、改变位置大小等等。</p><h2 id="Transition-Demo"><a href="#Transition-Demo" class="headerlink" title="Transition Demo"></a>Transition Demo</h2><p>先看一个最简单的例子：</p><p><img src="/images/10.gif" alt=""></p><p>如果不使用Transition，那么这种动画效果也非常好实现，只要针对两个ImageView分别使用属性动画改变其位置和大小即可。那么使用Transition的优势是什么呢？当涉及到的view较多时，Transition会大大精简我们的代码复杂度，因为我们只需要提供起始layout和结束layout即可。</p><p>简单看下上面例子的Transition代码实现：</p><p>首先是activity_main.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.lsd.transition.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"change"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/scene_root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/button"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">"@layout/sence1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Button用于动画的切换，稍后我们可以在java代码里看到它的点击事件。然后是一个id为scene_root的FrameLayout，是我们需要执行动画部分的根布局。默认状态下展示的是scene1.xml，执行动画后展示的是scene2.xml：</p><p>scene1.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/imageView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/imageView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">"packed"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/pic1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/imageView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"@+id/imageView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/imageView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@+id/imageView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/pic2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>preview如下：</p><p><img src="/images/11.png" alt="scene1"></p><p>scene2.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/imageView1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/imageView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">"0.328"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/pic1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/imageView2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"44dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/pic2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>preview如下：</p><p><img src="/images/12.png" alt="scene1"></p><p>最后是java code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewGroup mSceneRoot;</span><br><span class="line">    <span class="keyword">private</span> Scene mScene1;</span><br><span class="line">    <span class="keyword">private</span> Scene mScene2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mSceneRoot = findViewById(R.id.scene_root);</span><br><span class="line">        Button button = findViewById(R.id.button);</span><br><span class="line">        mScene1 = Scene.getSceneForLayout(mSceneRoot, R.layout.sence1, <span class="keyword">this</span>);</span><br><span class="line">        mScene2 = Scene.getSceneForLayout(mSceneRoot, R.layout.sence2, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span>[] mCurrentSence1 = &#123;<span class="keyword">true</span>&#125;;</span><br><span class="line">        <span class="keyword">final</span> ChangeBounds changeBounds = <span class="keyword">new</span> ChangeBounds();</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                TransitionManager.go(mCurrentSence1[<span class="number">0</span>] ? mScene2 : mScene1, changeBounds);</span><br><span class="line">                mCurrentSence1[<span class="number">0</span>] = !mCurrentSence1[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通过java代码我们可以简单看到这里有两个Scene，分别是Scene1和Scene2，他们分别对应了R.layout.sence1和R.layout.sence2，而当点击button执行切换动画时，是调用了TransitionManager的go方法执行了mScene1和mScene2的切换。</p><h2 id="Transition介绍"><a href="#Transition介绍" class="headerlink" title="Transition介绍"></a>Transition介绍</h2><p>现在来详细介绍一下Transition里的一些概念：</p><p>在两个layout之间执行动画分为以下三个过程：</p><p>1.为<code>starting layout</code>和<code>ending layout</code>各自创建Scene，当前的layout经常会作为<code>starting layout</code>。</p><p>2.创建一个Transition实例，我们可以指定使用哪种或者哪些动画效果，比如淡入淡出、改变位置大小等等。</p><p>3.调用<code>TransitionManager.go()</code>执行动画。</p><p>用官网的一张图可以清楚的表达出这个流程：</p><p><img src="/images/13.png" alt="scene1"></p><h3 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h3><p>一个Scene存储了layout中view的属性值。transitions框架可以从starting scene过渡到ending scene。</p><p>我们可以通过一个layout资源创建一个scene，<code>Scene.getSceneForLayout(mSceneRoot, R.layout.sence1, this);</code>，上面的demo就是通过这种方式创建Scene的。</p><blockquote><p>有一点需要注意的是，当我们创建两个layout时，两个layout中对应view的id应该是一致的，否则只能做到两个layout的瞬间转换，而没有一个过渡的效果。</p></blockquote><p>当然，我们也可以直接从一个ViewGroup中创建Scene实例。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Scene mScene;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain the scene root element</span></span><br><span class="line">mSceneRoot = (ViewGroup) mSomeLayoutElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain the view hierarchy to add as a child of</span></span><br><span class="line"><span class="comment">// the scene root when this scene is entered</span></span><br><span class="line">mViewHierarchy = (ViewGroup) someOtherLayoutElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a scene</span></span><br><span class="line">mScene = <span class="keyword">new</span> Scene(mSceneRoot, mViewHierarchy);</span><br></pre></td></tr></table></figure><h3 id="创建Scene-Actions"><a href="#创建Scene-Actions" class="headerlink" title="创建Scene Actions"></a>创建Scene Actions</h3><p>当我们进入或者退出一个scene的时候，我们可以自定义一些行为，当然这不是必须的，因为Transition框架会自动帮我们完成动画过程。</p><p>我们可以在下面两个场景中使用Scene Actions:</p><p>1.可以为不在同一层级的view添加动画。</p><p>2.可以为不能由transition框架自动执行的view添加动画，例如ListView。</p><p>Scene为我们提供了两个action，<code>Scene.setExitAction()</code>和<code>Scene.setEnterAction()</code>，需要提供<code>Runnable</code>作为参数。在动画运行之前，会执行<code>starting scene</code>的<code>setExitAction()</code>方法；在动画运行之后，会执行<code>ending scene</code>的<code>setEnterAction()</code>方法。</p><blockquote><p>不要使用scene actions在scenes的views之间传递数据。</p></blockquote><p>下面我们在原有代码基础上，增加这两个action，然后通过log，验证这两个方法调用时机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lsd.transition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.transition.ChangeBounds;</span><br><span class="line"><span class="keyword">import</span> android.transition.Scene;</span><br><span class="line"><span class="keyword">import</span> android.transition.TransitionManager;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewGroup mSceneRoot;</span><br><span class="line">    <span class="keyword">private</span> Scene mScene1;</span><br><span class="line">    <span class="keyword">private</span> Scene mScene2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mSceneRoot = findViewById(R.id.scene_root);</span><br><span class="line">        Button button = findViewById(R.id.button);</span><br><span class="line">        mScene1 = Scene.getSceneForLayout(mSceneRoot, R.layout.sence1, <span class="keyword">this</span>);</span><br><span class="line">        mScene2 = Scene.getSceneForLayout(mSceneRoot, R.layout.sence2, <span class="keyword">this</span>);</span><br><span class="line">        mScene1.setEnterAction(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"MyTransition"</span>, <span class="string">"mScene1 enter"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mScene1.setExitAction(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"MyTransition"</span>, <span class="string">"mScene1 exit"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mScene2.setEnterAction(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"MyTransition"</span>, <span class="string">"mScene2 enter"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mScene2.setExitAction(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"MyTransition"</span>, <span class="string">"mScene2 exit"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span>[] mCurrentSence1 = &#123;<span class="keyword">true</span>&#125;;</span><br><span class="line">        <span class="keyword">final</span> ChangeBounds changeBounds = <span class="keyword">new</span> ChangeBounds();</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"MyTransition"</span>, <span class="string">"click to change layout:"</span> + (mCurrentSence1[<span class="number">0</span>] ? <span class="string">"from Scene1 to Scene2"</span> : <span class="string">"from Scene2 to Scene1"</span>));</span><br><span class="line">                TransitionManager.go(mCurrentSence1[<span class="number">0</span>] ? mScene2 : mScene1, changeBounds);</span><br><span class="line">                mCurrentSence1[<span class="number">0</span>] = !mCurrentSence1[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当多次点击button，我们查看下输出的log：</p><blockquote><p>➜  ~ adb logcat | grep “MyTransition”</p><p>04-14 19:56:49.498 13662 13662 D MyTransition: click to change layout:from Scene1 to Scene2</p><p>04-14 19:56:49.507 13662 13662 D MyTransition: mScene2 enter</p><p>04-14 19:56:56.373 13662 13662 D MyTransition: click to change layout:from Scene2 to Scene1</p><p>04-14 19:56:56.373 13662 13662 D MyTransition: mScene2 exit</p><p>04-14 19:56:56.379 13662 13662 D MyTransition: mScene1 enter</p><p>04-14 19:57:02.466 13662 13662 D MyTransition: click to change layout:from Scene1 to Scene2</p><p>04-14 19:57:02.467 13662 13662 D MyTransition: mScene1 exit</p><p>04-14 19:57:02.473 13662 13662 D MyTransition: mScene2 enter</p><p>04-14 19:57:04.768 13662 13662 D MyTransition: click to change layout:from Scene2 to Scene1</p><p>04-14 19:57:04.769 13662 13662 D MyTransition: mScene2 exit</p><p>04-14 19:57:04.775 13662 13662 D MyTransition: mScene1 enter</p></blockquote><p>这里我们发现了一个小问题，就是在第一次点击button的时候，并没有调用<code>mScene1.setExitAction()</code>,我会在另外一篇文章中从源码单独分析这一问题。</p><h2 id="创建一个Transition"><a href="#创建一个Transition" class="headerlink" title="创建一个Transition"></a>创建一个Transition</h2><p>我们可以使用内置的几个子类来实例化Transition，比如说<code>AutoTransition</code>、<code>Fade</code>和<code>ChangeBounds</code>。</p><table><thead><tr><th>类</th><th>标签</th><th>属性</th><th>效果</th></tr></thead><tbody><tr><td>AutoTransition</td><td><code>&lt;autoTansition/&gt;</code></td><td>-</td><td>默认效果，按照淡出、更改大小和位置、淡入顺序</td></tr><tr><td>Fade</td><td><code>&lt;fade/&gt;</code></td><td><code>android:fadingMode=&quot;[fade_in\fade_out\fade_in_out]&quot;</code></td><td>fade_in 淡入 fade_out 淡出 fade_in_out (默认) 先淡出后淡入</td></tr><tr><td>ChangeBounds</td><td><code>&lt;changeBounds/&gt;</code></td><td>-</td><td>更改大小和位置</td></tr></tbody></table><h3 id="从resource文件中创建transition"><a href="#从resource文件中创建transition" class="headerlink" title="从resource文件中创建transition"></a>从resource文件中创建transition</h3><p>res/transition/fade_transition.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fade</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Transition mFadeTransition =</span><br><span class="line">        TransitionInflater.from(<span class="keyword">this</span>).</span><br><span class="line">        inflateTransition(R.transition.fade_transition);</span><br></pre></td></tr></table></figure><h3 id="直接中java代码中创建transition"><a href="#直接中java代码中创建transition" class="headerlink" title="直接中java代码中创建transition"></a>直接中java代码中创建transition</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transition mFadeTransition = <span class="keyword">new</span> Fade();</span><br></pre></td></tr></table></figure><p>当创建了Transition实例后，可以通过TransitionManager的go方法开启动画：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TransitionManager.go(mEndingScene, mFadeTransition);</span><br></pre></td></tr></table></figure><h2 id="不使用Scene来完成Transition"><a href="#不使用Scene来完成Transition" class="headerlink" title="不使用Scene来完成Transition"></a>不使用Scene来完成Transition</h2><p>有些时候，我们只想在当前视图中完成view的添加删除或者是修改操作，那么我们也可以不需要借助Scene。此时我们需要一个延迟的transition。即使用<code>TransitionManager.beginDelayedTransition()</code>来完成。举个简单的例子：</p><p>  效果图如下：</p><p>  <img src="/images/14.gif" alt=""></p><p>代码也极其简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lsd.transition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.transition.Fade;</span><br><span class="line"><span class="keyword">import</span> android.transition.TransitionManager;</span><br><span class="line"><span class="keyword">import</span> android.util.TypedValue;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.transition.Fade.IN;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> android.transition.Fade.OUT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView mLabelText;</span><br><span class="line">    <span class="keyword">private</span> ViewGroup mRootView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!mLabelText.isAttachedToWindow())&#123;</span><br><span class="line">                    TransitionManager.beginDelayedTransition(mRootView, <span class="keyword">new</span> Fade(IN));</span><br><span class="line">                    mRootView.addView(mLabelText);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    TransitionManager.beginDelayedTransition(mRootView, <span class="keyword">new</span> Fade(OUT));</span><br><span class="line">                    mRootView.removeView(mLabelText);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// Load the layout</span></span><br><span class="line"></span><br><span class="line">        mLabelText = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">        mLabelText.setText(<span class="string">"Label"</span>);</span><br><span class="line">        mLabelText.setTextColor(Color.BLACK);</span><br><span class="line">        mLabelText.setTextSize(TypedValue.COMPLEX_UNIT_SP, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        mRootView = findViewById(R.id.mainLayout);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transition生命周期回调"><a href="#Transition生命周期回调" class="headerlink" title="Transition生命周期回调"></a>Transition生命周期回调</h2><p>Transition的生命周期方法根activity类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Transition changeBounds = <span class="keyword">new</span> ChangeBounds();</span><br><span class="line">       changeBounds.addListener(<span class="keyword">new</span> Transition.TransitionListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransitionStart</span><span class="params">(Transition transition)</span> </span>&#123;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransitionEnd</span><span class="params">(Transition transition)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransitionCancel</span><span class="params">(Transition transition)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransitionPause</span><span class="params">(Transition transition)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransitionResume</span><span class="params">(Transition transition)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h2 id="自定义Transition"><a href="#自定义Transition" class="headerlink" title="自定义Transition"></a>自定义Transition</h2><p>当内置的Transition效果不能满足我们的需求的时候，我们可以自定义Transition效果，我们需要继承Transition类，并且重载必要的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTransition</span> <span class="keyword">extends</span> <span class="title">Transition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captureStartValues</span><span class="params">(TransitionValues values)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captureEndValues</span><span class="params">(TransitionValues values)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animator <span class="title">createAnimator</span><span class="params">(ViewGroup sceneRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   TransitionValues startValues,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   TransitionValues endValues)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transition内部使用了属性动画，所以我们需要像属性动画那样提供一个起始值和结束值。实际上我们只需要存储一个view的一部分属性，比如如果我们要执行一个view的背景色的过渡，那么就需要存储背景色这样的属性，而不需要去存储位置大小。</p><p>我么在<code>captureStartValues(transitionValues)</code>方法中传递起始view的值，框架会为<code>starting scene</code>中的每个view都调用这个方法。参数TransitionValues包含了对view的引用和一个Map实例，在Map实例里我们可以存储view相应的属性值。</p><p>为了确保存储的属性值的key不与其他TransitionValues的key冲突，我们使用如下的命名方式：</p><p><code>package_name:transition_name:property_name</code></p><p>比如说：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTransition</span> <span class="keyword">extends</span> <span class="title">Transition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define a key for storing a property value in</span></span><br><span class="line">    <span class="comment">// TransitionValues.values with the syntax</span></span><br><span class="line">    <span class="comment">// package_name:transition_class:property_name to avoid collisions</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROPNAME_BACKGROUND =</span><br><span class="line">            <span class="string">"com.example.android.customtransition:CustomTransition:background"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captureStartValues</span><span class="params">(TransitionValues transitionValues)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Call the convenience method captureValues</span></span><br><span class="line">        captureValues(transitionValues);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// For the view in transitionValues.view, get the values you</span></span><br><span class="line">    <span class="comment">// want and put them in transitionValues.values</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">captureValues</span><span class="params">(TransitionValues transitionValues)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Get a reference to the view</span></span><br><span class="line">        View view = transitionValues.view;</span><br><span class="line">        <span class="comment">// Store its background property in the values map</span></span><br><span class="line">        transitionValues.values.put(PROPNAME_BACKGROUND, view.getBackground());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>captureEndValues(TransitionValues)</code>与 <code>captureStartValues(TransitionValues)</code>含义类似，只不过它是用来存储<code>ending scene</code>的view的对应的属性值。</p><p> 我们在<code>createAnimator</code>方法中进行<code>starting scene</code>和<code>ending scene</code>的过渡，系统调用<code>createAnimator</code>的次数具体依赖于两个scene之间的差异，举个例子，假设我们现在的要在<code>starting scene</code>和<code>ending scene</code>之间进行淡出/淡入动画，<code>starting scene</code>一共有5个target view，其中两个会在<code>ending scene</code>中移除，剩下三个保留在<code>ending scene</code>中，除此之外，<code>ending scene</code>会额外添加一个target view，那么系统就会调用<code>createAnimator</code>方法6次：其中3次是对同时保留在<code>starting scene</code>和<code>ending scene</code>中的target view进行淡出淡入动画，2次对<code>starting scene</code>中要移除的view进行淡出动画，1次是对<code>ending scene</code>要添加的view进行淡入动画。</p><p> 有的view同时存在于<code>starting scene</code>和<code>ending scene</code>中，此时<code>TransitionValues</code>的<code>startValues</code>和<code>endValues</code>都是有值的；但是有时候view只存在于<code>starting scene</code>或<code>ending scene</code>，那么此时对应的<code>startValues</code>或<code>endValues</code>是有值的，另一个值是null。</p><p> 我们在<code>createAnimator(ViewGroup, TransitionValues, TransitionValues)</code>方法中，创建一个Animator完成我们想要的效果。举个例子：</p><p> 两秒时间内完成背景色的渐变：</p><p> <img src="/images/15.gif" alt=""></p><p> 核心代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2014 The Android Open Source Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.lsd.transition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.animation.Animator;</span><br><span class="line"><span class="keyword">import</span> android.animation.ArgbEvaluator;</span><br><span class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.ColorDrawable;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.transition.Transition;</span><br><span class="line"><span class="keyword">import</span> android.transition.TransitionValues;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeColor</span> <span class="keyword">extends</span> <span class="title">Transition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Key to store a color value in TransitionValues object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROPNAME_BACKGROUND = <span class="string">"com.lsd.transition:change_color:background"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convenience method: Add the background Drawable property value</span></span><br><span class="line"><span class="comment">     * to the TransitionsValues.value Map for a target.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">captureValues</span><span class="params">(TransitionValues values)</span> </span>&#123;</span><br><span class="line">        values.values.put(PROPNAME_BACKGROUND, values.view.getBackground());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captureStartValues</span><span class="params">(TransitionValues transitionValues)</span> </span>&#123;</span><br><span class="line">        captureValues(transitionValues);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">captureEndValues</span><span class="params">(TransitionValues transitionValues)</span> </span>&#123;</span><br><span class="line">        captureValues(transitionValues);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animator <span class="title">createAnimator</span><span class="params">(ViewGroup sceneRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   TransitionValues startValues, TransitionValues endValues)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == startValues || <span class="keyword">null</span> == endValues) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> View view = endValues.view;</span><br><span class="line">        Drawable startBackground = (Drawable) startValues.values.get(PROPNAME_BACKGROUND);</span><br><span class="line">        Drawable endBackground = (Drawable) endValues.values.get(PROPNAME_BACKGROUND);</span><br><span class="line">        <span class="keyword">if</span> (startBackground <span class="keyword">instanceof</span> ColorDrawable &amp;&amp; endBackground <span class="keyword">instanceof</span> ColorDrawable) &#123;</span><br><span class="line">            ColorDrawable startColor = (ColorDrawable) startBackground;</span><br><span class="line">            ColorDrawable endColor = (ColorDrawable) endBackground;</span><br><span class="line">            <span class="keyword">if</span> (startColor.getColor() != endColor.getColor()) &#123;</span><br><span class="line">                ValueAnimator animator = ValueAnimator.ofObject(<span class="keyword">new</span> ArgbEvaluator(),</span><br><span class="line">                        startColor.getColor(), endColor.getColor());</span><br><span class="line">                animator.setDuration(<span class="number">2000</span>);</span><br><span class="line">                animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">                        Object value = animation.getAnimatedValue();</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != value) &#123;</span><br><span class="line">                            view.setBackgroundColor((Integer) value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> animator;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transition限制"><a href="#Transition限制" class="headerlink" title="Transition限制"></a>Transition限制</h2><p>1.对于SurfaceView可能不起效果，因为SurfaceView的实例是在非UI线程更新的，可能无法与其他view的动画同步。</p><p>2.某些特定的过渡类型在应用到TextureView上时可能不会产生特定的效果。</p><p>3.继承自AdapterView的类如ListView，与该框架不兼容。</p><p>4.在对TextView进行resize时，在动画完成之前，文本可能会被放到一个新位置。为了避免这样的问题，不要对包含文本的view进行resize。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文学习总结于&lt;a href=&quot;https://developer.android.com/training/transitions/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.android.c
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
      <category term="动画" scheme="http://lisongda.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>佳句收藏</title>
    <link href="http://lisongda.com/2018/04/07/%E4%BD%B3%E5%8F%A5%E6%94%B6%E8%97%8F/"/>
    <id>http://lisongda.com/2018/04/07/佳句收藏/</id>
    <published>2018-04-07T11:10:47.000Z</published>
    <updated>2018-04-07T11:25:57.733Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p><blockquote><p>The steps you take don’t need to be big, they just need to take you in the right direction.</p><p>你迈出的步伐不非得很大，只要你是在往正确的方向前进就行。<br>—《神盾局特工》</p></blockquote><p>这段话出自神盾局特工，一部我追了大概有三四年左右的美剧。</p><p>2.</p><blockquote><p>你是阳光下的木叶，我是黑暗中的根。   —《火影忍者》</p></blockquote><p>火影忍者伴随着我成长，租漫画书、租光碟、跑去网吧看火影、玩火影游戏，这部动漫现在算算已经陪伴我十五年了，虽然在大二时漫画完结了，但对这部动漫的感情应该是无可替代的。这句话是我认为火影中最经典的一句话，由一个反派角色志村团藏临死前所说。你是愿意做沐浴着阳光的木叶呢？还是愿意做隐忍的根呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The steps you take don’t need to be big, they just need to take you in the right direction.&lt;/p&gt;
&lt;p&gt;你迈出的步伐不非得很大，只要你
      
    
    </summary>
    
      <category term="生活" scheme="http://lisongda.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://lisongda.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android动画系列之二使用动画显示或隐藏View</title>
    <link href="http://lisongda.com/2018/04/03/Android%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C%E4%BD%BF%E7%94%A8%E5%8A%A8%E7%94%BB%E6%98%BE%E7%A4%BA%E6%88%96%E9%9A%90%E8%97%8FView/"/>
    <id>http://lisongda.com/2018/04/03/Android动画系列之二使用动画显示或隐藏View/</id>
    <published>2018-04-03T09:05:18.000Z</published>
    <updated>2018-04-04T08:20:34.002Z</updated>
    
    <content type="html"><![CDATA[<p>这里view的现实和隐藏并不是简单的setVisibility(),而是使用动画来完成。主要参考<a href="https://developer.android.com/training/animation/reveal-or-hide-view.html" target="_blank" rel="noopener">https://developer.android.com/training/animation/reveal-or-hide-view.html</a>.</p><p>本文所有代码<a href="https://github.com/Brooks0129/RevealHideAnimation" target="_blank" rel="noopener">github地址</a>。</p><h2 id="淡入淡出效果（Crossfade）"><a href="#淡入淡出效果（Crossfade）" class="headerlink" title="淡入淡出效果（Crossfade）"></a>淡入淡出效果（Crossfade）</h2><p>淡入淡出效果指的是一个View或者ViewGroup淡出的同时另外一个View或者ViewGroup淡入。</p><p> 先看下效果：</p><p> <img src="/images/7.gif" alt=""></p><p> 主要使用<code>ViewPropertyAnimator</code>完成动画。 关于<code>ViewPropertyAnimator</code>的使用可以参考<a href="https://lisongda.com/2018/04/03/Android动画系列之一属性动画的一些tips">https://lisongda.com/2018/04/03/Android动画系列之一属性动画的一些tips</a></p><p> 核心代码如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">crossfade</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Set the content view to 0% opacity but visible, so that it is visible</span></span><br><span class="line">     <span class="comment">// (but fully transparent) during the animation.</span></span><br><span class="line">     mContentView.setAlpha(<span class="number">0f</span>);</span><br><span class="line">     mContentView.setVisibility(View.VISIBLE);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Animate the content view to 100% opacity, and clear any animation</span></span><br><span class="line">     <span class="comment">// listener set on the view.</span></span><br><span class="line">     mContentView.animate()</span><br><span class="line">             .alpha(<span class="number">1f</span>)</span><br><span class="line">             .setDuration(mShortAnimationDuration)</span><br><span class="line">             .setListener(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Animate the loading view to 0% opacity. After the animation ends,</span></span><br><span class="line">     <span class="comment">// set its visibility to GONE as an optimization step (it won't</span></span><br><span class="line">     <span class="comment">// participate in layout passes, etc.)</span></span><br><span class="line">     mLoadingView.animate()</span><br><span class="line">             .alpha(<span class="number">0f</span>)</span><br><span class="line">             .setDuration(mShortAnimationDuration)</span><br><span class="line">             .setListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">                     mLoadingView.setVisibility(View.GONE);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> mShortAnimationDuration可以自定义时间，也可以使用系统对于短暂动画默认的时间。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrieve and cache the system's default "short" animation time.</span></span><br><span class="line">       mShortAnimationDuration = getResources().getInteger(</span><br><span class="line">               android.R.integer.config_shortAnimTime);</span><br></pre></td></tr></table></figure><h2 id="卡片翻转效果（Card-flip）"><a href="#卡片翻转效果（Card-flip）" class="headerlink" title="卡片翻转效果（Card flip）"></a>卡片翻转效果（Card flip）</h2><p>先来看下效果图：</p><p><img src="/images/8.gif" alt=""></p><p>这里的效果其实是两个Fragment切换的动画。我们把这个两个Fragment分别叫做CardFrontFragment和CardBackFragment。</p><p>一共需要四个动画xml文件。对于第一个切换动画，CardFrontFragment退出，CardBackFragment进入。二者对应的动画文件分别为：</p><blockquote><p>RevealHideAnimation/app/src/main/res/animator/card_flip_right_out.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Rotate. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"-180"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"rotationY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/accelerate_decelerate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"@integer/card_flip_time_full"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:startOffset</span>=<span class="string">"@integer/card_flip_time_half"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CardFrontFragment退出动画分为两部分，第一部分绕y轴从右向左旋转180度，整个动画持续时间<code>@integer/card_flip_time_full</code>即2m，在动画进行到一半即1m时，并行执行另外一个动画，透明度变为完全透明，持续时间1ms，肉眼感觉立刻消失。这就是CardFrontFragment退出。</p><blockquote><p>RevealHideAnimation/app/src/main/res/animator/card_flip_right_in.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Rotate. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"180"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"rotationY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/accelerate_decelerate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"@integer/card_flip_time_full"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:startOffset</span>=<span class="string">"@integer/card_flip_time_half"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CardBackFragment进入动画分为三部分。首先通过改变alpha的值让fragment立刻消失，然后立刻绕y轴从右向左旋转180度（终点是0度），此时Fragment仍然是不可见状态，当旋转到一半时，并行执行第三个动画，透明度从0到1,变为可见。</p><p>点击返回键时，CardBackFragment退出，CardFrontFragment进入，仍然需要两个文件。分别对应：</p><blockquote><p>RevealHideAnimation/app/src/main/res/animator/card_flip_left_out.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Rotate. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"180"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"rotationY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/accelerate_decelerate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"@integer/card_flip_time_full"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:startOffset</span>=<span class="string">"@integer/card_flip_time_half"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>RevealHideAnimation/app/src/main/res/animator/card_flip_left_in.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Before rotating, immediately set the alpha to 0. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Rotate. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"-180"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"rotationY"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/accelerate_decelerate"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"@integer/card_flip_time_full"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:startOffset</span>=<span class="string">"@integer/card_flip_time_half"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>动画过程与上面分析的差不多，就不赘述了。</p><p>然后我们在activity创建切换Fragment的地方，设置这四个动画：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager()</span><br><span class="line">        .beginTransaction()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Replace the default fragment animations with animator resources representing</span></span><br><span class="line">        <span class="comment">// rotations when switching to the back of the card, as well as animator</span></span><br><span class="line">        <span class="comment">// resources representing rotations when flipping back to the front (e.g. when</span></span><br><span class="line">        <span class="comment">// the system Back button is pressed).</span></span><br><span class="line">        .setCustomAnimations(</span><br><span class="line">                R.animator.card_flip_right_in, R.animator.card_flip_right_out,</span><br><span class="line">                R.animator.card_flip_left_in, R.animator.card_flip_left_out)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Replace any fragments currently in the container view with a fragment</span></span><br><span class="line">        <span class="comment">// representing the next page (indicated by the just-incremented currentPage</span></span><br><span class="line">        <span class="comment">// variable).</span></span><br><span class="line">        .replace(R.id.container, <span class="keyword">new</span> CardBackFragment())</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add this transaction to the back stack, allowing users to press Back</span></span><br><span class="line">        <span class="comment">// to get to the front of the card.</span></span><br><span class="line">        .addToBackStack(<span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Commit the transaction.</span></span><br><span class="line">        .commit();</span><br></pre></td></tr></table></figure><h2 id="环形显示效果（Circular-Reveal）"><a href="#环形显示效果（Circular-Reveal）" class="headerlink" title="环形显示效果（Circular Reveal）"></a>环形显示效果（Circular Reveal）</h2><p>效果图如下：</p><p><img src="/images/9.gif" alt=""></p><p>使用<code>ViewAnimationUtils.createCircularReveal()</code>方法来完成动画。支持Android 5.0及以上。</p><p>展开动画代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check if the runtime version is at least Lollipop</span></span><br><span class="line">   <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">       <span class="comment">// get the center for the clipping circle</span></span><br><span class="line">       <span class="keyword">int</span> cx = view.getWidth() / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">int</span> cy = view.getHeight() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// get the final radius for the clipping circle</span></span><br><span class="line">       <span class="keyword">float</span> finalRadius = (<span class="keyword">float</span>) Math.hypot(cx, cy);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// create the animator for this view (the start radius is zero)</span></span><br><span class="line">       Animator anim =</span><br><span class="line">               ViewAnimationUtils.createCircularReveal(view, cx, cy, <span class="number">0</span>, finalRadius);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// make the view visible and start the animation</span></span><br><span class="line">       view.setVisibility(View.VISIBLE);</span><br><span class="line">       anim.setDuration(<span class="number">2000</span>);</span><br><span class="line">       anim.start();</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// set the view to visible without a circular reveal animation below Lollipop</span></span><br><span class="line">       view.setVisibility(View.VISIBLE);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>隐藏效果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">       <span class="keyword">int</span> cx = view.getWidth() / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">int</span> cy = view.getHeight() / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">float</span> initialRadius = (<span class="keyword">float</span>) Math.hypot(cx, cy);</span><br><span class="line"></span><br><span class="line">       Animator anim =</span><br><span class="line">               ViewAnimationUtils.createCircularReveal(view, cx, cy, initialRadius, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       anim.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>.onAnimationEnd(animation);</span><br><span class="line">               view.setVisibility(View.INVISIBLE);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       anim.setDuration(<span class="number">2000</span>);</span><br><span class="line">       anim.start();</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       view.setVisibility(View.VISIBLE);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其实核心代码就是<code>ViewAnimationUtils.createCircularReveal(view, cx, cy, 0, finalRadius);</code>，第一个参数是要操作的view，第二个和第三个参数分别是圆形的原点坐标，第四个参数是起始半径，第五个参数是结束半径。</p><hr><p>上述三个动画完整代码地址<a href="https://github.com/Brooks0129/RevealHideAnimation" target="_blank" rel="noopener">github</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里view的现实和隐藏并不是简单的setVisibility(),而是使用动画来完成。主要参考&lt;a href=&quot;https://developer.android.com/training/animation/reveal-or-hide-view.html&quot; targe
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
      <category term="技术" scheme="http://lisongda.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android动画" scheme="http://lisongda.com/tags/Android%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android动画系列之一属性动画的一些tips</title>
    <link href="http://lisongda.com/2018/04/03/Android%E5%8A%A8%E7%94%BB%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E7%9A%84%E4%B8%80%E4%BA%9Btips/"/>
    <id>http://lisongda.com/2018/04/03/Android动画系列之一属性动画的一些tips/</id>
    <published>2018-04-03T07:02:50.000Z</published>
    <updated>2018-04-03T09:04:04.357Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习总结于<a href="https://developer.android.com/guide/topics/graphics/prop-animation.html" target="_blank" rel="noopener">https://developer.android.com/guide/topics/graphics/prop-animation.html</a></p><h2 id="ValueAnimator与ObjectAnimator的区别"><a href="#ValueAnimator与ObjectAnimator的区别" class="headerlink" title="ValueAnimator与ObjectAnimator的区别"></a>ValueAnimator与ObjectAnimator的区别</h2><p>ValueAnimator是属性动画的主要驱动引擎，它会计算需要改变的属性值。属性值的改变一共需要两步完成：1是改变属性值，2是将计算出的值设置到对象上。ValueAnimator无法自动完成第二步，所以我们必须要监听属性值的改变，然后手动设置到对象上。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator animation = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">100f</span>);</span><br><span class="line">animation.setDuration(<span class="number">1000</span>);</span><br><span class="line">animation.start();</span><br><span class="line">animation.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator updatedAnimation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// You can use the animated value in a property that uses the</span></span><br><span class="line">        <span class="comment">// same type as the animation. In this case, you can use the</span></span><br><span class="line">        <span class="comment">// float value in the translationX property.</span></span><br><span class="line">        <span class="keyword">float</span> animatedValue = (<span class="keyword">float</span>)updatedAnimation.getAnimatedValue();</span><br><span class="line">        textView.setTranslationX(animatedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ObjectAnimator是ValueAnimator的子类，它可以直接驱动对象的相应属性，对象的属性值会自动更新，而不需要我们在<code>ValueAnimator.AnimatorUpdateListener</code>中手动设置。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator animation = ObjectAnimator.ofFloat(textView, <span class="string">"translationX"</span>, <span class="number">100f</span>);</span><br><span class="line">animation.setDuration(<span class="number">1000</span>);</span><br><span class="line">animation.start();</span><br></pre></td></tr></table></figure><p>使用ObjectAnimator是有限制的。</p><ul><li><p>要改变的属性值必须要有setter方法，<code>set&lt;PropertyName&gt;()</code>，因为ObjectAnimator在动画过程中会自动更新属性值，它必须通过setter方法来赋值。比如说，如果属性名字是foo，那么就应该有一个setFoo()方法。那么现在问题来了，如果我们访问的类中没有对应的setter方法怎么办？有三个解决办法：</p><p>1.如果我们有权限修改改类的话，直接为对应属性加上setter方法。</p><p>2.使用一个包装类，我们可以在包装类里使用setter方法，然后再改变原对象属性的值。</p><p>3.使用ValueAnimator。</p></li><li><p>如果ObjectAnimator的<code>values...</code>参数只有一个值，那么这个值是动画的结束时的值。因此，我们还需要一个起始值，系统会读取该属性的默认值，所以这个时候就需要getter方法<code>get&lt;PropertyName&gt;()</code>。比如说，如果属性名字是foo，那么就应该有一个getFoo()方法。</p></li><li><p>setter方法传递的值应该和getter方法获取的值的类型保持一致。</p></li></ul><h2 id="属性动画中的回调"><a href="#属性动画中的回调" class="headerlink" title="属性动画中的回调"></a>属性动画中的回调</h2><ul><li><p>Animator.AnimatorListener</p><p>  Animator.AnimatorListener中有四个需要去实现的方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(textView, <span class="string">"translationX"</span>, <span class="number">0f</span>, <span class="number">100f</span>);</span><br><span class="line">objectAnimator.setDuration(<span class="number">100</span>);</span><br><span class="line">objectAnimator.start();</span><br><span class="line">objectAnimator.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>ValueAnimator.AnimatorUpdateListener</p><p>ValueAnimator.AnimatorUpdateListener中的onAnimationUpdate()方法会在动画的每一帧调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator valueAnimator = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">100f</span>);</span><br><span class="line">valueAnimator.setDuration(<span class="number">100</span>);</span><br><span class="line">valueAnimator.start();</span><br><span class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> animatedValue = (<span class="keyword">float</span>) animation.getAnimatedValue();</span><br><span class="line">        textView.setTranslationX(animatedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>AnimatorListenerAdapter<br>使用AnimatorListenerAdapter我们不必去实现Animator.AnimatorListener中的所有方法。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, <span class="string">"alpha"</span>, <span class="number">1f</span>, <span class="number">0f</span>);</span><br><span class="line">fadeAnim.setDuration(<span class="number">250</span>);</span><br><span class="line">fadeAnim.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">    balls.remove(((ObjectAnimator)animation).getTarget());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用StateListAnimator来描绘view不同状态"><a href="#使用StateListAnimator来描绘view不同状态" class="headerlink" title="使用StateListAnimator来描绘view不同状态"></a>使用StateListAnimator来描绘view不同状态</h2><p>比如我们可以在view按下和松开的时候为view指定不同的动画效果，具体用法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- the pressed state; increase x and y size to 150% --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"scaleX"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">"1.5"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"scaleY"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">"1.5"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- the default, non-pressed state; set x and y size to 100% --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"scaleX"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"scaleY"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">"@android:integer/config_shortAnimTime"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueTo</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为对应的view设置 android:stateListAnimator属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button android:stateListAnimator=&quot;@xml/animate_scale&quot;</span><br><span class="line">        ... /&gt;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/images/5.gif" alt=""></p><h2 id="指定关键帧"><a href="#指定关键帧" class="headerlink" title="指定关键帧"></a>指定关键帧</h2><p>Keyframe对象包含了一个时间/值的一个对应关系，我们可以指定在特定的时间点，value对应的值。同样可以使用插值器来决定两个Keyframe对应的时间间隔中，value变化的方式。Keyframe需要用<code>ofInt()</code>/<code>ofFloat()</code>/<code>ofObject()</code>这个三个工厂方法之一来进行初始化的操作，然后需要用PropertyValuesHolder的<code>ofKeyframe()</code>来获取PropertyValuesHolder对象，再把PropertyValuesHolder对象传递给ObjectAnimator；示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Keyframe kf0 = Keyframe.ofFloat(<span class="number">0f</span>, <span class="number">0f</span>);</span><br><span class="line">Keyframe kf1 = Keyframe.ofFloat(.<span class="number">5f</span>, <span class="number">360f</span>);</span><br><span class="line">Keyframe kf2 = Keyframe.ofFloat(<span class="number">1f</span>, <span class="number">0f</span>);</span><br><span class="line">PropertyValuesHolder pvhRotation = PropertyValuesHolder.ofKeyframe(<span class="string">"rotation"</span>, kf0, kf1, kf2);</span><br><span class="line">ObjectAnimator rotationAnim = ObjectAnimator.ofPropertyValuesHolder(target, pvhRotation)</span><br><span class="line">rotationAnim.setDuration(<span class="number">5000</span>ms);</span><br></pre></td></tr></table></figure><h2 id="ViewPropertyAnimator"><a href="#ViewPropertyAnimator" class="headerlink" title="ViewPropertyAnimator"></a>ViewPropertyAnimator</h2><p>ViewPropertyAnimator是个神器！它可以将一个view的不同属性动画并行进行，而且代码简洁！</p><p>假设我们要移动一个view，包含x和y。</p><p><strong>使用多个ObjectAnimator对象：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectAnimator animX = ObjectAnimator.ofFloat(myView, <span class="string">"x"</span>, <span class="number">50f</span>);</span><br><span class="line">ObjectAnimator animY = ObjectAnimator.ofFloat(myView, <span class="string">"y"</span>, <span class="number">100f</span>);</span><br><span class="line">AnimatorSet animSetXY = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">animSetXY.playTogether(animX, animY);</span><br><span class="line">animSetXY.start();</span><br></pre></td></tr></table></figure><p><strong>使用一个ObjectAnimator对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PropertyValuesHolder pvhX = PropertyValuesHolder.ofFloat(<span class="string">"x"</span>, <span class="number">50f</span>);</span><br><span class="line">PropertyValuesHolder pvhY = PropertyValuesHolder.ofFloat(<span class="string">"y"</span>, <span class="number">100f</span>);</span><br><span class="line">ObjectAnimator.ofPropertyValuesHolder(myView, pvhX, pvyY).start();</span><br></pre></td></tr></table></figure><p><strong>使用ViewPropertyAnimator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myView.animate().x(<span class="number">50f</span>).y(<span class="number">100f</span>);</span><br></pre></td></tr></table></figure><p>最最牛逼的是，ViewPropertyAnimator实现3D旋转，真的是太容易了！！！</p><p>button旋转180度，效果图如下：</p><p><img src="/images/6.gif" alt=""></p><p>核心代码就一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               button.animate().rotationYBy(<span class="number">180</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>详情请查阅<a href="https://android-developers.googleblog.com/2011/05/introducing-viewpropertyanimator.html" target="_blank" rel="noopener">https://android-developers.googleblog.com/2011/05/introducing-viewpropertyanimator.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文学习总结于&lt;a href=&quot;https://developer.android.com/guide/topics/graphics/prop-animation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://lisongda.com/tags/Android/"/>
    
      <category term="技术" scheme="http://lisongda.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Android动画" scheme="http://lisongda.com/tags/Android%E5%8A%A8%E7%94%BB/"/>
    
      <category term="属性动画" scheme="http://lisongda.com/tags/%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android中常用线程介绍及对比</title>
    <link href="http://lisongda.com/2018/04/01/Android%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%BA%BF%E7%A8%8B%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AF%B9%E6%AF%94/"/>
    <id>http://lisongda.com/2018/04/01/Android中常用线程介绍及对比/</id>
    <published>2018-04-01T12:02:46.000Z</published>
    <updated>2018-04-01T14:08:32.447Z</updated>
    
    <content type="html"><![CDATA[<p>Android中需要用到线程的地方有很多，ThreadPool、AsyncTask、ThreadHandler和IntentService等，本文会对他们进行介绍和部分源码分析。</p><table><thead><tr><th>Thread name</th><th>Function</th></tr></thead><tbody><tr><td><a href="https://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.html" target="_blank" rel="noopener">ThreadPool</a></td><td>并行执行多个任务</td></tr><tr><td><a href="https://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="noopener">AsyncTask</a></td><td>worker Thread执行后台任务并将进度和结果传递给主线程中更新UI</td></tr><tr><td><a href="https://developer.android.com/reference/android/os/HandlerThread.html" target="_blank" rel="noopener">HandlerThread</a></td><td>一个包含Looper的Thread，在子线程中执行耗时的、可能有多个任务的操作</td></tr><tr><td><a href="https://developer.android.com/reference/android/app/IntentService.html" target="_blank" rel="noopener">IntentService</a></td><td>在后台执行耗时的异步任务，当任务完成后会自动停止，本质是Service</td></tr></tbody></table><h2 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>重用线程池中的线程，避免线程创建和销毁带来的性能开销。</li><li>能有效控制线程池的最大并发数，避免大量线程之间因互相抢占系统资源而导致的阻塞现象。</li><li>能够对线程进行简单的管理，并且提供定时执行以及指定间隔循环执等功能。</li></ol><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>线程池的真正实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>corePoolSize：核心线程数，即使空闲状态也一直存活，除非allowCoreThreadTimeOut设置为true</li><li>maximumPoolSize：线程池容纳的最大线程数，当活动线程数达到这个数值之后，后续的新任务会阻塞</li><li>keepAliveTime：非核心线程闲置时的超时时长，超时后，会被回收</li><li>workQueue：线程池中的任务队列</li><li>threadFactory：线程工厂，为线程池提供新线程的功能。</li><li>handler：当线程池无法执行新任务时，这可能是由于任务队列已满或者是无法成功执行任务，这个时候ThreadPoolExecutor会调用handler的rejectedExecution方法来通知调用者。</li></ul><h3 id="ThreadPoolExecutor执行任务时大致遵循如下规则："><a href="#ThreadPoolExecutor执行任务时大致遵循如下规则：" class="headerlink" title="ThreadPoolExecutor执行任务时大致遵循如下规则："></a>ThreadPoolExecutor执行任务时大致遵循如下规则：</h3><ol><li>如果线程池中的线程数量未达到核心线程的数量，那么会直接启动一个核心线程来执行任务。</li><li>如果线程池中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。</li><li>如果步骤2中无法将任务插入到任务队列中，这往往是由于任务队列已满，这个时候如果线程数量未达到线程池规定的最大值，那么会立即启动一个非核心线程来执行任务。</li><li>如果步骤3中线程数量已经达到线程池规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用handler的rejectedExecution方法来通知调用者。</li></ol><h3 id="AsyncTask中线程池的应用："><a href="#AsyncTask中线程池的应用：" class="headerlink" title="AsyncTask中线程池的应用："></a>AsyncTask中线程池的应用：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOG_TAG = <span class="string">"AsyncTask"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class="line">    <span class="comment">// We want at least 2 threads and at most 4 threads in the core pool,</span></span><br><span class="line">    <span class="comment">// preferring to have 1 less than the CPU count to avoid saturating</span></span><br><span class="line">    <span class="comment">// the CPU with background work</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadFactory sThreadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"AsyncTask #"</span> + mCount.getAndIncrement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An &#123;<span class="doctag">@link</span> Executor&#125; that can be used to execute tasks in parallel.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor THREAD_POOL_EXECUTOR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">                sPoolWorkQueue, sThreadFactory);</span><br><span class="line">        threadPoolExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">        THREAD_POOL_EXECUTOR = threadPoolExecutor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="线程池的分类："><a href="#线程池的分类：" class="headerlink" title="线程池的分类："></a>线程池的分类：</h3><p>1.FixedThreadPool</p><blockquote><p>线程数量固定的线程池，当线程处于空闲状态时，他们并不会被回收，除非线程池被关闭。当所有线程都处于活动状态时，新任务都会处于等待状态，直到有线程空闲出来。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2.CachedThreadPool</p><blockquote><p>线程数量不定的线程池，最大线程数为Integer.MAX_VALUE，这类线程池比较适合执行大量的耗时较少的任务。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.ScheduledThreadPool</p><blockquote><p>它的核心线程数量是固定的，而非核心线程数是没有限制的，并且当前非核心线程闲置时会被立即回收。主要用于执行定时任务和具有固定周期的重复任务。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</span><br><span class="line">    DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,<span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.SingleThreadExecutor</p><blockquote><p>线程池内部只有一个核心线程，它确保所有的任务都在同一个线程中按顺序执行。统一所有的外界任务到一个线程中，使得这些任务之间不需要处理线程同步的问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h2><h3 id="AsyncTask简介"><a href="#AsyncTask简介" class="headerlink" title="AsyncTask简介"></a>AsyncTask简介</h3><p>AsyncTask是一个轻量级的异步任务类。它可以在线程池中执行后台任务，然后把执行的进度和最终结果传递给朱线程中更新UI。从实现上来说，AsyncTask封装了Thread和Handler，通过AsyncTask可以更加方便地执行后台任务以及在主线程中访问UI，但是AsyncTask并不适合进行特别耗时的后台任务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>三种泛型类型分别代表“启动任务执行的输入参数”、“后台任务执行的进度”、“后台计算结果的类型”。在特定场合下，并不是所有类型都被使用，如果没有被使用，可以用java.lang.Void类型代替。</p><p>一个异步任务的执行一般包括以下几个步骤：</p><ol><li><p>execute(Params… params)，执行一个异步任务，需要我们在代码中调用此方法，触发异步任务的执行。</p></li><li><p>onPreExecute()，在execute(Params… params)被调用后立即执行，一般用来在执行后台任务前对UI做一些标记。</p></li><li><p>doInBackground(Params… params)，在onPreExecute()完成后立即执行，用于执行较为费时的操作，此方法将接收输入参数和返回计算结果。在执行过程中可以调用publishProgress(Progress… values)来更新进度信息。</p></li><li><p>onProgressUpdate(Progress… values)，在调用publishProgress(Progress… values)时，此方法被执行，直接将进度信息更新到UI组件上。</p></li><li><p>onPostExecute(Result result)，当后台操作结束时，此方法将会被调用，计算结果将做为参数传递到此方法中，直接将结果显示到UI组件上。 </p></li></ol><h3 id="AsyncTask源码解析："><a href="#AsyncTask源码解析：" class="headerlink" title="AsyncTask源码解析："></a>AsyncTask源码解析：</h3><p>从AsyncTask的execute方法开始：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Executes the task with the specified parameters. The task returns</span></span><br><span class="line"><span class="comment"> * itself (this) so that the caller can keep a reference to it.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note: this function schedules the task on a queue for a single background</span></span><br><span class="line"><span class="comment"> * thread or pool of threads depending on the platform version.  When first</span></span><br><span class="line"><span class="comment"> * introduced, AsyncTasks were executed serially on a single background thread.</span></span><br><span class="line"><span class="comment"> * Starting with &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#DONUT&#125;, this was changed</span></span><br><span class="line"><span class="comment"> * to a pool of threads allowing multiple tasks to operate in parallel. Starting</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> android.os.Build.VERSION_CODES#HONEYCOMB&#125;, tasks are back to being</span></span><br><span class="line"><span class="comment"> * executed on a single thread to avoid common application errors caused</span></span><br><span class="line"><span class="comment"> * by parallel execution.  If you truly want parallel execution, you can use</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> #executeOnExecutor&#125; version of this method</span></span><br><span class="line"><span class="comment"> * with &#123;<span class="doctag">@link</span> #THREAD_POOL_EXECUTOR&#125;; however, see commentary there for warnings</span></span><br><span class="line"><span class="comment"> * on its use.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method must be invoked on the UI thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params The parameters of the task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> This instance of AsyncTask.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException If &#123;<span class="doctag">@link</span> #getStatus()&#125; returns either</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@link</span> AsyncTask.Status#RUNNING&#125; or &#123;<span class="doctag">@link</span> AsyncTask.Status#FINISHED&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #executeOnExecutor(java.util.concurrent.Executor, Object[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #execute(Runnable)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">execute</span><span class="params">(Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> executeOnExecutor(sDefaultExecutor, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span><span class="params">(Executor exec,</span></span></span><br><span class="line"><span class="function"><span class="params">        Params... params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> RUNNING:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                        + <span class="string">" the task is already running."</span>);</span><br><span class="line">            <span class="keyword">case</span> FINISHED:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                        + <span class="string">" the task has already been executed "</span></span><br><span class="line">                        + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mStatus = Status.RUNNING;</span><br><span class="line">    onPreExecute();</span><br><span class="line">    mWorker.mParams = params;</span><br><span class="line">    exec.execute(mFuture);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>execute方法和executeOnExecutor方法必须在主线程中调用，在Android1.6之前，AsyncTask是串行执行任务的。1.6开始采用线程池处理并行任务，但是从3.0开始，为了避免AsyncTask所带来的并发错误，Asynctask又采用了一个线程来串行执行任务。尽管如此，在Android3.0以及以后，我们可以通过AsyncTask的executeOnExecutor方法来并行的执行任务。<br>execute方法调用了executeOnExecutor方法，sDefaultExecutor是一个串行的线程池，它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An &#123;<span class="doctag">@link</span> Executor&#125; that executes tasks one at a time in serial</span></span><br><span class="line"><span class="comment"> * order.  This serialization is global to a particular process.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br></pre></td></tr></table></figure><p>在executorOnExecutor中，onPreExecute方法最先执行，然后线程池开始执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">      Runnable mActive;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">          mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      r.run();</span><br><span class="line">                  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                      scheduleNext();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">              scheduleNext();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>//ToDo FutureTask解析</p><p>AsyncTask的Params参数封装为FutueTask对象，FutureTask是一个并发类。SerialExecutor的execute方法首先会吧FutureTask对象插入到任务队列mTasks中，如果这个时候没有正在活动的AsyncTask任务，那么就会调用SerialExecutor的scheduleNext来执行下一个AsyncTask任务，同时当一个AsyncTask任务执行完成后，AsyncTask会继续执行其他任务直到所有的任务都会被执行，默认情况下，AsyncTask是串行执行的。</p><p>AsyncTask中有两个线程池（SerialExecutor和<code>THREAD_POOL_EXECUTOR</code>）和一个Handler（InternalHandler），其中线程池SerialExecutor用于任务的排队，而线程池<code>THREAD_POOL_EXECUTOR</code>用于真正的执行任务，InternalThread用于将执行环境从线程池切换到主线程。</p><p>由于FutureTask的run方法会调用mWorker的call方法，因此mWorker的call方法最终会在线程池中执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mWorker = <span class="keyword">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Result <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         mTaskInvoked.set(<span class="keyword">true</span>);</span><br><span class="line">         Result result = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class="line">             <span class="comment">//noinspection unchecked</span></span><br><span class="line">             result = doInBackground(mParams);</span><br><span class="line">             Binder.flushPendingCommands();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Throwable tr) &#123;</span><br><span class="line">             mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">             <span class="keyword">throw</span> tr;</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             postResult(result);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>在mWorker的call方法中，首先mTaskInvoked设为true，表示当前任务已经被调用过了，然后执行doInBackground方法，接着将其返回值传递给postResult方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">            <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">    message.sendToTarget();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mHandler赋值如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mHandler = callbackLooper == <span class="keyword">null</span> || callbackLooper == Looper.getMainLooper()</span><br><span class="line">        ? getMainHandler()</span><br><span class="line">        : <span class="keyword">new</span> Handler(callbackLooper);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getMainHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sHandler = <span class="keyword">new</span> InternalHandler(Looper.getMainLooper());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里获取的mHandler一定是主线程的handler的吗？通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">(@Nullable Looper callbackLooper)</span> </span>&#123;</span><br><span class="line">    mHandler = callbackLooper == <span class="keyword">null</span> || callbackLooper == Looper.getMainLooper()</span><br><span class="line">            ? getMainHandler()</span><br><span class="line">            : <span class="keyword">new</span> Handler(callbackLooper);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到如果当前的callbackLooper为null或者是主线程的Looper的话，那么对应的handler就是主线程的handler，callbackLooper有没有可能为其他值呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new asynchronous task. This constructor must be invoked on the UI thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AsyncTask</span><span class="params">(@Nullable Handler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(handler != <span class="keyword">null</span> ? handler.getLooper() : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该构造方法并不对外开放，所以handler一定为主线程的handler。这也就做到了线程的切换。</p><p>InternalHandler的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_RESULT:</span><br><span class="line">                <span class="comment">// There is only one result</span></span><br><span class="line">                result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</span><br><span class="line">                result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当sHandler收到<code>MESSAGE_POST_RESULT</code>消息时，会调用AsyncTask的finish方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">        onCancelled(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onPostExecute(result);</span><br><span class="line">    &#125;</span><br><span class="line">    mStatus = Status.FINISHED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AsyncTask注意事项："><a href="#AsyncTask注意事项：" class="headerlink" title="AsyncTask注意事项："></a>AsyncTask注意事项：</h3><p>1.AsyncTask中的所有任务将以串行的方式执行；</p><p>2.How to cancel task？<br>调用cancel方法：</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">       mCancelled.set(<span class="keyword">true</span>);</span><br><span class="line">       <span class="keyword">return</span> mFuture.cancel(mayInterruptIfRunning);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 终止更新进度</span></span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!isCancelled()) &#123;</span><br><span class="line">           getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</span><br><span class="line">                   <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 回调onCancelled方法</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">           onCancelled(result);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           onPostExecute(result);</span><br><span class="line">       &#125;</span><br><span class="line">       mStatus = Status.FINISHED;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre><p><code>mFuture.cancel(mayInterruptIfRunning);</code>会调用线程的interrupt方法。即使我们正确地调用了cancle() 也未必能真正地取消任务。因为如果在doInBackgroud里有一个不可中断的操作，比如BitmapFactory.decodeStream()，那么这个操作会继续下去。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... value)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 判断是否被取消</span></span><br><span class="line">   <span class="keyword">if</span>(isCancelled()) <span class="keyword">return</span>;</span><br><span class="line">.........</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Integer <span class="title">doInBackground</span><span class="params">(Void... mgs)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Task被取消了，马上退出</span></span><br><span class="line"><span class="keyword">if</span>(isCancelled()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.内存泄漏</p><p> 如果AsyncTask被声明为Activity的非静态的内部类，那么AsyncTask会保留一个对创建了AsyncTask的Activity的引用。如果Activity已经被销毁，AsyncTask的后台线程还在执行，它将继续在内存里保留这个引用，导致Activity无法被回收，引起内存泄露。</p><h2 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h2><p>HandlerThread继承了Thread，它是一种可以使用Handler的Thread，它的实现也很简单，就是在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许在HandlerThread中创建Handler了。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mPriority;</span><br><span class="line">    <span class="keyword">int</span> mTid = -<span class="number">1</span>;</span><br><span class="line">    Looper mLooper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = Process.THREAD_PRIORITY_DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(String name, <span class="keyword">int</span> priority)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        mPriority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLooperPrepared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mTid = Process.myTid();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mLooper = Looper.myLooper();</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">        Process.setThreadPriority(mPriority);</span><br><span class="line">        onLooperPrepared();</span><br><span class="line">        Looper.loop();</span><br><span class="line">        mTid = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Looper <span class="title">getLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isAlive()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If the thread has been started, wait until the looper has been created.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive() &amp;&amp; mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mLooper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quit();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper looper = getLooper();</span><br><span class="line">        <span class="keyword">if</span> (looper != <span class="keyword">null</span>) &#123;</span><br><span class="line">            looper.quitSafely();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the identifier of this thread. See Process.myTid().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getThreadId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HandlerThread和普通的Thread有显著的不同之处。普通Thread主要用于在run 方法中执行一个耗时任务，而HandlerThread在内部创建了消息队列，外界需要通过Handler的消息方式来通知HandlerThread执行一个具体的任务。</p><p>HandlerThread的简单用法如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HandlerThread handlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"MyHandlerThread"</span>);</span><br><span class="line">     handlerThread.start();</span><br><span class="line">     Handler handler = <span class="keyword">new</span> Handler(handlerThread.getLooper()) &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br></pre></td></tr></table></figure><h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h2><p>IntentService是一种特殊的Service，它继承了Service并且它是一个抽象类，可以用于执行后台耗时的任务，当任务执行后它会自动停止，同时由于IntentService是服务的原因，它的优先级要比单纯的线程高，所以IntentService比较适合执行一些高优先级的后台任务。它的onCreate方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> It would be nice to have an option to hold a partial wakelock</span></span><br><span class="line">    <span class="comment">// during processing, and to have a static startService(Context, Intent)</span></span><br><span class="line">    <span class="comment">// method that would launch the service &amp; hand off a wakelock.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onCreate();</span><br><span class="line">    HandlerThread thread = <span class="keyword">new</span> HandlerThread(<span class="string">"IntentService["</span> + mName + <span class="string">"]"</span>);</span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    mServiceLooper = thread.getLooper();</span><br><span class="line">    mServiceHandler = <span class="keyword">new</span> ServiceHandler(mServiceLooper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServiceHandler的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceHandler</span><span class="params">(Looper looper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        onHandleIntent((Intent)msg.obj);</span><br><span class="line">        stopSelf(msg.arg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IntentService内部封装了HanderThread和Handler，当它被第一次启动时，它的onCreate方法会被调用，onCreate方法会创建一个HandlerThread，然后使用它的Looper来构造一个Handler对象mServiceHandler，这样通过mServiceHandler发送的消息最终都会在HandlerThread中执行。<br>每次启动IntentService，它的onStartCommand方法就会调用一次，IntentService在onStartCommand中处理每个后台任务的Intent。onStartCommand方法调用了onStart，onStart如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(@Nullable Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">    Message msg = mServiceHandler.obtainMessage();</span><br><span class="line">    msg.arg1 = startId;</span><br><span class="line">    msg.obj = intent;</span><br><span class="line">    mServiceHandler.sendMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IntentService通过mServiceHandler发送了一条消息，mServiceHandler收到消息后，会将Intent对象传递给onHandleIntent处理。当onHandleIntent方法结束后，IntentService会通过stopSelf(int startId)来尝试停止服务。stopSelf(int startId)会等待所有的消息都处理完毕后才终止服务；stopSelf()则会立即停止服务。<br>IntentService的onHandlerIntent方法是一个抽象方法，它的作用是从Intent的参数中区分具体的任务并执行这些任务。如果当前只存在一个任务，那么onHandleIntent方法执行完这个任务后，stopSelf(int startId)就会直接停止服务；如果目前存在多个任务，那么当onHandleIntent方法执行完最后一个任务，stopSelf(int startId)才会直接停止服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android中需要用到线程的地方有很多，ThreadPool、AsyncTask、ThreadHandler和IntentService等，本文会对他们进行介绍和部分源码分析。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Thread name&lt;/th&gt;
&lt;
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://lisongda.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="线程" scheme="http://lisongda.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android中TextView部分文字高亮及可点击</title>
    <link href="http://lisongda.com/2018/03/29/Android%E4%B8%ADTextView%E9%83%A8%E5%88%86%E6%96%87%E5%AD%97%E9%AB%98%E4%BA%AE%E5%8F%8A%E5%8F%AF%E7%82%B9%E5%87%BB/"/>
    <id>http://lisongda.com/2018/03/29/Android中TextView部分文字高亮及可点击/</id>
    <published>2018-03-29T03:11:37.000Z</published>
    <updated>2018-03-31T10:08:06.629Z</updated>
    
    <content type="html"><![CDATA[<p>首先看下TextView如何实现部分文字高亮？</p><p>实现效果：</p><p><img src="/images/4.png" alt=""></p><p>这个很简单，利用h5标签就可以。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// string.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span>&lt;![CDATA[你同意&lt;font color="#4AC7BA"&gt;用户协议&lt;/font&gt;吗?]]&gt;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line"> CharSequence html = Html.fromHtml(getResources().getString(R.string.text));</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">        textView.setText(html);</span><br></pre></td></tr></table></figure><p> 为什么要使用CDATA？使用&lt;![CDATA[]]&gt;来包含不被xml解析器解析的内容。当然也可以不使用，那么string.xml中字符串应该为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span>你同意&amp;lt;font color="#4AC7BA"&gt;用户协议&amp;lt;/font&gt;吗?<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>  大于号和小于号都可以使用对应的转移字符来表示。<code>&amp;lt;对应 &lt;</code>,<code>&amp;gt;对应 &gt;</code><br>  当然,&gt;也可以用相应的转义符表示。但是如果既不使用转义符，也不使用CDATA，只按照如下格式，是无法产生高亮效果的。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span>你同意<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#4AC7BA"</span>&gt;</span>用户协议<span class="tag">&lt;/<span class="name">font</span>&gt;</span>吗?<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="comment">&lt;!--无法产生高亮效果--&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式应该是最简单的一种实现部分文案高亮的方法。</p><hr><p>但是现在如果要加个需求，高亮部分可以点击，非高亮部分不能点击呢？</p><p><strong>就要使用到SpannableString来实现了。</strong><br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// string.xml</span><br><span class="line">   &lt;string name=&quot;text&quot;&gt;你同意用户协议吗?&lt;/string&gt;</span><br><span class="line">   &lt;string name=&quot;text_sub&quot;&gt;用户协议&lt;/string&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">        setSpanTextInfo(textView, clickableSpan, getResources().getString(R.string.text), getResources().getString(R.string.text_sub));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClickableSpan clickableSpan = <span class="keyword">new</span> ClickableSpan() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"click"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSpanTextInfo</span><span class="params">(TextView textView, ClickableSpan clickableSpan, String fullTips, String spanTips)</span> </span>&#123;</span><br><span class="line">        SpannableString resultTipStr = <span class="keyword">new</span> SpannableString(fullTips);</span><br><span class="line">        <span class="keyword">int</span> start = fullTips.indexOf(spanTips);</span><br><span class="line">        <span class="keyword">int</span> end = start + spanTips.length();</span><br><span class="line">        <span class="keyword">int</span> defColor = Color.parseColor(<span class="string">"#4AC7BA"</span>);</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 可点击</span></span><br><span class="line">            resultTipStr.setSpan(clickableSpan, start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);</span><br><span class="line">            <span class="comment">// 高亮</span></span><br><span class="line">            resultTipStr.setSpan(<span class="keyword">new</span> ForegroundColorSpan(defColor), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);</span><br><span class="line">        &#125;</span><br><span class="line">        textView.setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class="line">        textView.setText(resultTipStr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几点需要注意的是：</p><ul><li>这里的高亮其实没有必要新创建一个ForegroundColorSpan，覆盖ClickableSpan的updateDrawState方法同样可以做到；</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.textView);</span><br><span class="line">        setSpanTextInfo(textView, clickableSpan, getResources().getString(R.string.text), getResources().getString(R.string.text_sub));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClickableSpan clickableSpan = <span class="keyword">new</span> ClickableSpan() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"click"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.updateDrawState(ds);</span><br><span class="line">            <span class="comment">// 高亮</span></span><br><span class="line">            ds.setColor(Color.parseColor(<span class="string">"#4AC7BA"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSpanTextInfo</span><span class="params">(TextView textView, ClickableSpan clickableSpan, String fullTips, String spanTips)</span> </span>&#123;</span><br><span class="line">        SpannableString resultTipStr = <span class="keyword">new</span> SpannableString(fullTips);</span><br><span class="line">        <span class="keyword">int</span> start = fullTips.indexOf(spanTips);</span><br><span class="line">        <span class="keyword">int</span> end = start + spanTips.length();</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 可点击</span></span><br><span class="line">            resultTipStr.setSpan(clickableSpan, start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);</span><br><span class="line">        &#125;</span><br><span class="line">        textView.setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class="line">        textView.setText(resultTipStr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>其实刚开始的代码不是这样的，</p><p>刚开始的代码是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高亮</span></span><br><span class="line">resultTipStr.setSpan(<span class="keyword">new</span> ForegroundColorSpan(defColor), start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);</span><br><span class="line"><span class="comment">// 可点击</span></span><br><span class="line">resultTipStr.setSpan(clickableSpan, start, end, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);</span><br></pre></td></tr></table></figure><p>区别在哪里？就是这两行代码顺序反了，但是表现结果就出问题了，这里就不贴图了，表现为高亮部分的颜色变了，不是我们自己设置的颜色。这里查阅了一下官方文档，</p></li></ul><blockquote><p>The text with a ClickableSpan attached will be underlined and the link color will be used as a text color.<br>The default link color is the theme’s accent color or android:textColorLink if this attribute is defined in the theme. </p></blockquote><p> 即ClickableSpan是由默认颜色的，而且它覆盖了我们通过ForegroundColorSpan设置的颜色。</p><p> 我尝试在源码中找一下ClickableSpan是何时设置该颜色的，但是一直没有找到。。。。</p><ul><li><p>当我们在网上查看类似的代码时，其实大部分代码都跟如下相似：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpannableString string = <span class="keyword">new</span> SpannableString(<span class="string">"Text with clickable text"</span>);</span><br><span class="line">string.setSpan(<span class="keyword">new</span> CustomClickableSpan(), <span class="number">10</span>, <span class="number">19</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br></pre></td></tr></table></figure></li></ul><p>这样的代码有什么问题？java文件里字符串硬编码，应该放在string.xml里。当然这是小问题，因为这只是个例子嘛？但是更严重的问题就是当我们setSpan时起始位置和结束位置该如何确定呢？如果我们要适配多种语言，而不仅仅是中文和英文，该怎么做？比如我参与的项目是针对海外用户的产品，要适配20+的语言，当然是根据不同的文案来选择不同的位置，所以这里就不能把位置写死。</p><p> 就像大家刚开始看到的，我使用了两个字符串的方式来完成这项操作，大致意思是将需要高亮的部分单独提取出来成为一个文案，这样通过字符串匹配的方式来找到起始位置和结束位置。这种方式有没有什么缺点呢？理论上没有。但是在实际开发中却出现了问题。</p><p> 首先，我们要适配20+的语言，这个翻译工作不是由PM来完成的，而是交给第三方翻译公司完成。那么他们在翻译的时候，就经常出现两个字符串无法匹配的情况，即使我们已经明确强调了第二个字符串一定要是第一个字符串的子串，但是结果仍然不如人意，真的不知道他们的工作如何完成的。。。所以每次都需要RD来手动校验。如果出现了不匹配，就会导致高亮和点击效果失效。</p><p> 后来我们这边的RD提出了一个方案，即通过下面的方式就可以保证两个字符串一定会匹配上：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> // string.xml</span><br><span class="line"> &lt;string name=&quot;text&quot;&gt;你同意%s吗?&lt;/string&gt;</span><br><span class="line">&lt;string name=&quot;text_sub&quot;&gt;用户协议&lt;/string&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line">String child = getResources().getString(R.string.text_sub);</span><br><span class="line">String parent = getResources().getString(R.string.text, child);</span><br><span class="line">setSpanTextInfo(textView, clickableSpan, parent, child);</span><br></pre></td></tr></table></figure><p> 不知道大家看懂了没，就是把第一个字符串中需要高亮的部分提取出来，使用%s代替，再在java代码中替换回去，这样就可以保证第二个字符串一定是第一个字符串的子串，这样乍一看是不是很完美？但是它有个致命缺点。</p><p> 就是在做多语翻译的时候，有可能无法get到整个字符串的语意。举个例子，假设现在整个字符串为“你今天跟她打招呼了吗”，“打招呼”需要高亮可点击，那么使用最后的方案就是“你今天跟她%s了吗”，其实这句话的语意是不完整的，在翻译成其他语言的时候，有可能完全不知所云！当然，如果只是中文或英文，倒是没有什么问题。</p><p> 综上，还是采用，两个字符串匹配的方式，如果需要做多个国家的语言适配，那么还是推荐最原始的方案。<br> 即：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// string.xml</span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span>你同意用户协议吗?<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"text_sub"</span>&gt;</span>用户协议<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先看下TextView如何实现部分文字高亮？&lt;/p&gt;
&lt;p&gt;实现效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个很简单，利用h5标签就可以。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://lisongda.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="android" scheme="http://lisongda.com/tags/android/"/>
    
      <category term="TextView" scheme="http://lisongda.com/tags/TextView/"/>
    
  </entry>
  
  <entry>
    <title>一些小的Java&amp;Android知识点</title>
    <link href="http://lisongda.com/2018/03/27/%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%9A%84Java-Android%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://lisongda.com/2018/03/27/一些小的Java-Android知识点/</id>
    <published>2018-03-27T12:06:07.000Z</published>
    <updated>2018-04-29T14:20:44.837Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>==、equals方法和hashcode的区别</p><p>  <code>==</code>：当基本数据类型之间比较时，比较的是他们的值；否则比较的是他们在内存中的地址。</p><p>  <code>equals方法</code>：如果我们不覆盖Object中的equals方法，那么比较的是内存中的地址；</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;  </span><br><span class="line">   <span class="keyword">return</span> (<span class="keyword">this</span> == obj);  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>  当然我们可以根据具体的需求重写该方法。</p><p> <code>hashCode方法</code>：<br> equals()相等的两个对象他们的hashCode()肯定相等，也就是用equals()对比是绝对可靠的；hashCode()相等的两个对象他们的equals()不一定相等，也就是hashCode()不是绝对可靠的；对于大量需要比较的对象，如果调用equals()那么效率很低，所以先调用hashCode(）方法。如果hashCode()方法得到的值不一样，那么两个对象肯定不相等。如果hashCode()方法得到的值一样，那么再调用equals(）方法。这样会大大提高效率。  </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;==、equals方法和hashcode的区别&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;==&lt;/code&gt;：当基本数据类型之间比较时，比较的是他们的值；否则比较的是他们在内存中的地址。&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;equals方法&lt;/code&gt;：如果我们不覆盖Ob
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://lisongda.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android onSaveInstanceState调用时机</title>
    <link href="http://lisongda.com/2018/03/22/Android-onSaveInstanceState%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA/"/>
    <id>http://lisongda.com/2018/03/22/Android-onSaveInstanceState调用时机/</id>
    <published>2018-03-22T06:50:54.000Z</published>
    <updated>2018-04-29T14:22:09.369Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中PM加了个需求，要做一个Android应用内通知，即当App在前台收到相应通知消息时，在屏幕顶部展示一个通知（并非系统Notification）。由于种种原因，最后技术选型将应用内通知选择作为一个activity，也就是在当前activity上弹出一个背景透明的activity。然后我发现下层的activity在onPause之后调用了onSaveInstanceState方法，why？难道onSaveInstanceState不是在activity异常销毁的时候才会调用吗？我们用onSaveInstanceState来保存activity状态，但是onSaveInstanceState真正的调用时机是什么？本文将对onSaveInstanceState方法的调用时机一探究竟。</p><h2 id="onSaveInstanceState介绍"><a href="#onSaveInstanceState介绍" class="headerlink" title="onSaveInstanceState介绍"></a>onSaveInstanceState介绍</h2><p>首先看一下<a href="https://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState%28android.os.Bundle%29" target="_blank" rel="noopener">onSaveInstanceState</a><br>官方API介绍。</p><blockquote><p>Called to retrieve per-instance state from an activity before being killed so that the state can be restored in onCreate(Bundle) or onRestoreInstanceState(Bundle) (the Bundle populated by this method will be passed to both).</p></blockquote><blockquote><p>This method is called before an activity may be killed so that when it comes back some time in the future it can restore its state. For example, if activity B is launched in front of activity A, and at some point activity A is killed to reclaim resources, activity A will have a chance to save the current state of its user interface via this method so that when the user returns to activity A, the state of the user interface can be restored via onCreate(Bundle) or onRestoreInstanceState(Bundle).</p></blockquote><blockquote><p>Do not confuse this method with activity lifecycle callbacks such as onPause(), which is always called when an activity is being placed in the background or on its way to destruction, or onStop() which is called before destruction. One example of when onPause() and onStop() is called and not this method is when a user navigates back from activity B to activity A: there is no need to call onSaveInstanceState(Bundle) on B because that particular instance will never be restored, so the system avoids calling it. An example when onPause() is called and not onSaveInstanceState(Bundle) is when activity B is launched in front of activity A: the system may avoid calling onSaveInstanceState(Bundle) on activity A if it isn’t killed during the lifetime of B since the state of the user interface of A will stay intact.</p></blockquote><blockquote><p>The default implementation takes care of most of the UI per-instance state for you by calling onSaveInstanceState() on each view in the hierarchy that has an id, and by saving the id of the currently focused view (all of which is restored by the default implementation of onRestoreInstanceState(Bundle)). If you override this method to save additional information not captured by each individual view, you will likely want to call through to the default implementation, otherwise be prepared to save all of the state of each view yourself.</p></blockquote><blockquote><p>If called, this method will occur after onStop() for applications targeting platforms starting with P. For applications targeting earlier platform versions this method will occur before onStop() and there are no guarantees about whether it will occur before or after onPause().</p></blockquote><p>介绍有点长，我翻译了一下：</p><blockquote><p>在acitivty被销毁之前，该方法会被调用，用来存储每个实例的状态。这些信息存储在Bundle中，通过onCreate(Bundle)或者onRestoreInstanceState(Bundle)方法恢复实例的的状态。</p></blockquote><blockquote><p>这个方法会在activity可能被销毁之前调用，如果将来activity回到了前台，就可以恢复它的状态。举个例子，如果activity A打开了Activity B，那么就有可能为了回收资源而导致Acitvity A被销毁，鉴于有这种情况出现，那么为了能让用户在将来再次回到Acitivty A时仍然能够看到之前的交互信息，就会调用onSaveInstanceState方法保存activity的状态。通过onCreate(Bundle)或者onRestoreInstanceState(Bundle)方法恢复实例的的状态。</p></blockquote><blockquote><p>不要把这个方法与activity生命周期中的一些方法混淆了，onPause()会在acitivity且后台的时候被调用。什么时候onPause和onStop会调用，但是onSaveInstanseState不会调用呢？举个例子，当从Activity B回到Activity A后，由于B的状态不需要保存了，所以系统就不会调用onSaveInstanseState方法了。什么时候onPause会调用但是onSaveInstanseState不会调用呢？当Activity A上打开了Activity B后，如果A在B的生命周期内不会被销毁，那么A就不会调用onSaveInstanceState方法，A的用户交互信息仍将保持完整性。</p></blockquote><blockquote><p>该方法的默认实现存储了大部分UI的状态，存储了每个view及其对应的id（通过onRestoreInstanceState的默认实现可以将存储的信息恢复出来）。如果你覆盖了这个方法，想在这个方法里额外添加一些信息，那么最好调用下默认实现（super. onSaveInstanseState）,否则你就要自己来手动存储所有view的状态了。<br>从android P开始，这个方法将在onStop()之后被调用。对于版本较低的系统，这个方法将在onStop之前调用，无法保证与onPause的先后调用顺序。</p></blockquote><p>虽然这段内容很长，但是都是满满的干货。大部分也都很好理解，不过我对下面这句话一直存在疑问，</p><blockquote><p>An example when onPause() is called and not onSaveInstanceState(Bundle) is when activity B is launched in front of activity A: the system may avoid calling onSaveInstanceState(Bundle) on activity A if it isn’t killed during the lifetime of B since the state of the user interface of A will stay intact.</p></blockquote><p>Activity A打开了Activity B，真的可以保证Activity A在Activity B的生命周期内绝对不会被杀吗？如何绝对保证呢？如果无法保证，那么就一定会调用onSaveInstanceState吧。</p><p>简单来说，onSaveInstanceState作用就是在activity可能被销毁时被调用来存储activity的状态，然后可以在onCreate或者onRestoreInstanceState中恢复这些信息。</p><p>其实上面的介绍已经比较详细的说明了这个方法的调用时机，即：</p><blockquote><p>从android P开始，这个方法将在onStop()之后被调用。对于版本较低的系统，这个方法将在onStop之前调用，无法保证与onPause的先后调用顺序。</p></blockquote><p>我们现在从源码的角度验证这一观点。我们验证的版本是Android 8.0（API 26）：</p><p>首先我们看下Activity.java中的onSaveInstanceState方法定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">    outState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());</span><br><span class="line"></span><br><span class="line">    outState.putInt(LAST_AUTOFILL_ID, mLastAutofillId);</span><br><span class="line">    Parcelable p = mFragments.saveAllState();</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        outState.putParcelable(FRAGMENTS_TAG, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mAutoFillResetNeeded) &#123;</span><br><span class="line">        outState.putBoolean(AUTOFILL_RESET_NEEDED, <span class="keyword">true</span>);</span><br><span class="line">        getAutofillManager().onSaveInstanceState(outState);</span><br><span class="line">    &#125;</span><br><span class="line">    getApplication().dispatchActivitySaveInstanceState(<span class="keyword">this</span>, outState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个方法我们大概可以看到onSaveInstanceState这个方法保存了ui的信息和fragment的状态。那么我们看下activity<br>中调用该方法的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</span><br><span class="line">    onSaveInstanceState(outState);</span><br><span class="line">    saveManagedDialogs(outState);</span><br><span class="line">    mActivityTransitionState.saveState(outState);</span><br><span class="line">    storeHasCurrentPermissionRequest(outState);</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_LIFECYCLE) Slog.v(TAG, <span class="string">"onSaveInstanceState "</span> + <span class="keyword">this</span> + <span class="string">": "</span> + outState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Activity的performSaveInstanceState方法是由Instrumentation的callActivityOnSaveInstanceState方法调用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Instrumentation.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnSaveInstanceState</span><span class="params">(Activity activity, Bundle outState)</span> </span>&#123;</span><br><span class="line">    activity.performSaveInstanceState(outState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instrumentation的callActivityOnSaveInstanceState方法是由ActivityThread的callCallActivityOnSaveInstanceState方法调用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ActivityThread.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callCallActivityOnSaveInstanceState</span><span class="params">(ActivityClientRecord r)</span> </span>&#123;</span><br><span class="line">    r.state = <span class="keyword">new</span> Bundle();</span><br><span class="line">    r.state.setAllowFds(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">        r.persistentState = <span class="keyword">new</span> PersistableBundle();</span><br><span class="line">        mInstrumentation.callActivityOnSaveInstanceState(r.activity, r.state,</span><br><span class="line">                r.persistentState);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mInstrumentation.callActivityOnSaveInstanceState(r.activity, r.state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到有四处调用了callCallActivityOnSaveInstanceState方法：</p><p><img src="/images/1.png" alt="&quot;callCallActivityOnSaveInstanceState调用&quot;"></p><p>下面详细介绍一下这四个方法，这样我们才知道activity在什么时候调用了该方法：</p><ul><li>performPauseActivity</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Bundle <span class="title">performPauseActivity</span><span class="params">(ActivityClientRecord r, <span class="keyword">boolean</span> finished,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">boolean</span> saveState, String reason)</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">if</span> (finished) &#123;</span><br><span class="line">           r.activity.mFinished = <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Next have the activity save its current state and managed dialogs...</span></span><br><span class="line">       <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; saveState) &#123;</span><br><span class="line">           callCallActivityOnSaveInstanceState(r);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       performPauseActivityIfNeeded(r, reason);</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> !r.activity.mFinished &amp;&amp; saveState ? r.state : <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在performPauseActivity方法中，如果<code>!r.activity.mFinished &amp;&amp; saveState</code>为true，则会执行callCallActivityOnSaveInstanceState方法，然后才会执行performPauseActivityIfNeeded方法，在performPauseActivityIfNeeded方法里，调用了activity<br>的onPause方法。我们通过最开始介绍了解到，onSaveInstanceState方法的执行时机与onPause没有必然联系，但是这段代码却是在onPause之前执行的，是不是有点矛盾？那么我们来看下<code>!r.activity.mFinished &amp;&amp; saveState</code>究竟什么时候为true。首先看一下<code>r.activity.mFinished</code>这个变量，这个变量在activity<br>明确要finish的时候为true，比如我们手动调用了finish()方法；再看一下saveState变量，这里就不贴代码了，我们追溯的这个变量的源头可以发现saveState变量即是<code>activity.getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB</code>的值，即判断targetSdkVersion是否小于11。所以到现在我们就知道了，如果我们的targetSdkVersion小于11，那么onSaveInstanceState方法确实可能在onPause之前调用。但是我们现在几乎所有项目的targetSdkVersion都大于11，所以其实几乎不会在该时候调用onSaveInstance方法。</p><ul><li>performStopActivityInner</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performStopActivityInner</span><span class="params">(ActivityClientRecord r,</span></span></span><br><span class="line"><span class="function"><span class="params">         StopInfo info, <span class="keyword">boolean</span> keepShown, <span class="keyword">boolean</span> saveState, String reason)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing stop of "</span> + r);</span><br><span class="line">     <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!keepShown &amp;&amp; r.stopped) &#123;</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">         <span class="comment">// One must first be paused before stopped...</span></span><br><span class="line">         performPauseActivityIfNeeded(r, reason);</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Next have the activity save its current state and managed dialogs...</span></span><br><span class="line">         <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; saveState) &#123;</span><br><span class="line">             <span class="keyword">if</span> (r.state == <span class="keyword">null</span>) &#123;</span><br><span class="line">                 callCallActivityOnSaveInstanceState(r);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (!keepShown) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">// Now we are idle.</span></span><br><span class="line">                 r.activity.performStop(<span class="keyword">false</span> <span class="comment">/*preserveWindow*/</span>);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                             <span class="string">"Unable to stop activity "</span></span><br><span class="line">                             + r.intent.getComponent().toShortString()</span><br><span class="line">                             + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             r.stopped = <span class="keyword">true</span>;</span><br><span class="line">             EventLog.writeEvent(LOG_AM_ON_STOP_CALLED, UserHandle.myUserId(),</span><br><span class="line">                     r.activity.getComponentName().getClassName(), reason);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们看到在performStopActivityInner方法里首先执行了performPauseActivityIfNeeded，即再次保证了在onStop之前一定会调用onPause。然后判断是否应该调用callCallActivityOnSaveInstanceState，最后执行<code>r.activity.performStop(false /*preserveWindow*/);</code>，即调用activity<br>的onStop。那么这里的callCallActivityOnSaveInstanceState在什么情况下会执行呢？<code>r.activity.mFinished</code>变量与上面分析的一样，但是saveState有一些不同，我们我们现在来看下在什么情况下为true，</p><p><img src="/images/2.png" alt="&quot;saveState&quot;"></p><p>我们可以看到在第二个方法调用里，saveState为true，而且该方法是由handleStopActivity调用的，即当准备调用activity的onStop方法时，会调用ActivityThread<br>的handleStopActivity方法，此时如果<code>r.activity.mFinished</code>为false，会调用onSaveInstanceState方法。其实我们大部分时候看到的onSaveInstanceState方法调用都是在这个时候发生的。</p><ul><li>handleSleeping</li></ul><p>我们看下这个方法的介绍：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   // TODO: This method should be changed to use &#123;@link #performStopActivityInner&#125; to perform to</span><br><span class="line">    // stop operation on the activity to reduce code duplication and the chance of fixing a bug in</span><br><span class="line">    // one place and missing the other.</span><br><span class="line">    private void handleSleeping(IBinder token, boolean sleeping) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个方法里的逻辑跟performStopActivityInner方法里差不多，而且通过这个todo我们也可以看到本身这个方法里的逻辑就应该使用performStopActivityInner来完成。所以对这个方法我们就不做过多解释了。</p><ul><li>handleRelaunchActivity</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleRelaunchActivity</span><span class="params">(ActivityClientRecord tmp)</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Need to ensure state is saved.</span></span><br><span class="line">      <span class="keyword">if</span> (!r.paused) &#123;</span><br><span class="line">          performPauseActivity(r.token, <span class="keyword">false</span>, r.isPreHoneycomb(), <span class="string">"handleRelaunchActivity"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (r.state == <span class="keyword">null</span> &amp;&amp; !r.stopped &amp;&amp; !r.isPreHoneycomb()) &#123;</span><br><span class="line">          callCallActivityOnSaveInstanceState(r);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      handleDestroyActivity(r.token, <span class="keyword">false</span>, configChanges, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">      handleLaunchActivity(r, currentIntent, <span class="string">"handleRelaunchActivity"</span>);</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>handleRelaunchActivity方法会在activity重新创建时调用，例如我们旋转了屏幕。我们可以看到首先调用了performPauseActivity方法，即activity<br>的onPause，然后调用callCallActivityOnSaveInstanceState犯法，即onSaveInstanceState，然后调用handleDestroyActivity方法完成activity<br>的销毁操作。乍一看是不是有点奇怪？onStop呢？在onSaveInstanceState和onDestory之间不是应该有个onStop吗？其实是在handleDestroyActivity里面，我们简单看下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleDestroyActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finishing,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> getNonConfigInstance)</span> </span>&#123;</span><br><span class="line">        ActivityClientRecord r = performDestroyActivity(token, finishing,</span><br><span class="line">                configChanges, getNonConfigInstance);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> ActivityClientRecord <span class="title">performDestroyActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> finishing,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> configChanges, <span class="keyword">boolean</span> getNonConfigInstance)</span> </span>&#123;</span><br><span class="line">        ActivityClientRecord r = mActivities.get(token);</span><br><span class="line">        Class&lt;? extends Activity&gt; activityClass = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing finish of "</span> + r);</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">            activityClass = r.activity.getClass();</span><br><span class="line">            r.activity.mConfigChangeFlags |= configChanges;</span><br><span class="line">            <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                r.activity.mFinished = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            performPauseActivityIfNeeded(r, <span class="string">"destroy"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!r.stopped) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    r.activity.performStop(r.mPreserveWindow);  <span class="comment">// ***here</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                                <span class="string">"Unable to stop activity "</span></span><br><span class="line">                                + safeToComponentShortString(r.intent)</span><br><span class="line">                                + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                r.stopped = <span class="keyword">true</span>;</span><br><span class="line">                EventLog.writeEvent(LOG_AM_ON_STOP_CALLED, UserHandle.myUserId(),</span><br><span class="line">                        r.activity.getComponentName().getClassName(), <span class="string">"destroy"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">           ...</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                r.activity.mCalled = <span class="keyword">false</span>;</span><br><span class="line">                mInstrumentation.callActivityOnDestroy(r.activity);</span><br><span class="line">                <span class="keyword">if</span> (!r.activity.mCalled) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</span><br><span class="line">                        <span class="string">"Activity "</span> + safeToComponentShortString(r.intent) +</span><br><span class="line">                        <span class="string">" did not call through to super.onDestroy()"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (r.window != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    r.window.closeAllPanels();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                            <span class="string">"Unable to destroy activity "</span> + safeToComponentShortString(r.intent)</span><br><span class="line">                            + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mActivities.remove(token);</span><br><span class="line">        StrictMode.decrementExpectedActivityCount(activityClass);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同样我们也可以看到在performDestroyActivity方法里，会判断activty的pause和stop状态是否执行过，如果没有，则会执行对应生命周期的方法，最后调用<code>mInstrumentation.callActivityOnDestroy(r.activity);</code>，即activity<br>的onDestory方法。<br>到这里我们基本就分析完了，总结起来就是：</p><blockquote><p>在Android P之前：<br>在targetSdkVersion小于11时，如果要执行onSaveInstanceState方法，则会在onPause之前执行。当targetSdkVersion大于等于11时，是在onPause之后执行的，但是都一定会在onStop之前。</p></blockquote><p>当然，按照文档中所说的，在Android P中，这个方法将在onStop()之后被调用。这个的分析以后待补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目中PM加了个需求，要做一个Android应用内通知，即当App在前台收到相应通知消息时，在屏幕顶部展示一个通知（并非系统Notification）。由于种种原因，最后技术选型将应用内通知选择作为一个activity，也就是在当前activity上弹出一个背景透明的a
      
    
    </summary>
    
      <category term="技术" scheme="http://lisongda.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="http://lisongda.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="onSaveInstanceState" scheme="http://lisongda.com/tags/onSaveInstanceState/"/>
    
  </entry>
  
</feed>
